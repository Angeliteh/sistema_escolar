"""
Script para preparar archivos para el instalador
"""

import os
import shutil
import requests
from pathlib import Path

def create_installer_structure():
    """Crea la estructura de directorios para el instalador"""
    print("üìÅ CREANDO ESTRUCTURA DEL INSTALADOR")
    print("=" * 50)
    
    directories = [
        "installer/source",
        "installer/source/app",
        "installer/source/dependencies",
        "installer/source/config",
        "installer/source/resources",
        "installer/output",
        "installer/scripts"
    ]
    
    for directory in directories:
        Path(directory).mkdir(parents=True, exist_ok=True)
        print(f"‚úÖ Creado: {directory}")

def check_prerequisites():
    """Verifica que todos los prerequisitos est√©n listos"""
    print("\nüîç VERIFICANDO PREREQUISITOS")
    print("=" * 50)

    # Verificar archivos Python principales
    required_files = [
        "simple_launcher.py",
        "app/__init__.py",
        "school_config.json",
        "resources/data/alumnos.db"
    ]

    missing_files = []
    for file in required_files:
        if not Path(file).exists():
            missing_files.append(file)

    if missing_files:
        print(f"‚ùå Archivos faltantes: {', '.join(missing_files)}")
        return False

    print("‚úÖ Archivos Python encontrados")
    print("‚úÖ Prerequisitos verificados")
    return True

def copy_application_files():
    """Copia los archivos Python de la aplicaci√≥n al directorio del instalador"""
    print("\nüì¶ COPIANDO ARCHIVOS DE LA APLICACI√ìN")
    print("=" * 50)

    dest_app = Path("installer/source/app")
    if dest_app.exists():
        shutil.rmtree(dest_app)
    dest_app.mkdir(parents=True)

    # Copiar archivos y carpetas principales
    items_to_copy = [
        "simple_launcher.py",
        "ai_chat.py",
        "main_qt.py",
        "app/",
        "resources/",
        "requirements.txt"
    ]

    for item in items_to_copy:
        source = Path(item)
        if source.exists():
            if source.is_file():
                shutil.copy2(source, dest_app / source.name)
                print(f"‚úÖ Copiado archivo: {source}")
            elif source.is_dir():
                shutil.copytree(source, dest_app / source.name)
                print(f"‚úÖ Copiado directorio: {source}")
        else:
            print(f"‚ö†Ô∏è No encontrado: {source}")

    # Copiar archivos de configuraci√≥n
    config_files = [
        "school_config.json",
        "version.json"
    ]

    for config_file in config_files:
        if Path(config_file).exists():
            shutil.copy2(config_file, f"installer/source/config/{config_file}")
            print(f"‚úÖ Copiado config: {config_file}")
        else:
            print(f"‚ö†Ô∏è No encontrado: {config_file}")

    return True

def download_dependencies():
    """Descarga dependencias necesarias"""
    print("\nüì• DESCARGANDO DEPENDENCIAS")
    print("=" * 50)
    
    dependencies_dir = Path("installer/source/dependencies")
    
    # URLs de dependencias
    dependencies = {
        "vcredist_x64.exe": "https://aka.ms/vs/17/release/vc_redist.x64.exe",
        "wkhtmltopdf.exe": "https://github.com/wkhtmltopdf/packaging/releases/download/0.12.6-1/wkhtmltox-0.12.6-1.msvc2015-win64.exe",
        "python-3.12.5-amd64.exe": "https://www.python.org/ftp/python/3.12.5/python-3.12.5-amd64.exe"
    }
    
    for filename, url in dependencies.items():
        file_path = dependencies_dir / filename
        
        if file_path.exists():
            print(f"‚úÖ Ya existe: {filename}")
            continue
        
        try:
            print(f"üì• Descargando {filename}...")
            response = requests.get(url, stream=True)
            response.raise_for_status()
            
            with open(file_path, 'wb') as f:
                for chunk in response.iter_content(chunk_size=8192):
                    f.write(chunk)
            
            print(f"‚úÖ Descargado: {filename} ({file_path.stat().st_size / 1024 / 1024:.1f} MB)")
            
        except Exception as e:
            print(f"‚ùå Error descargando {filename}: {e}")
            print(f"üí° Descarga manualmente desde: {url}")
    
    return True

def create_installer_script():
    """Crea el script de Inno Setup"""
    print("\nüìù CREANDO SCRIPT DE INNO SETUP")
    print("=" * 50)
    
    # Leer informaci√≥n de versi√≥n
    version = "2.0.0"
    try:
        import json
        with open("version.json", "r") as f:
            version_data = json.load(f)
            version = version_data.get("version", "2.0.0")
    except:
        pass
    
    # Leer configuraci√≥n de escuela
    school_name = "Sistema de Constancias Escolares"
    try:
        import json
        with open("school_config.json", "r", encoding="utf-8") as f:
            school_data = json.load(f)
            school_name = f"Sistema de Constancias - {school_data.get('school_name', 'Escuela')}"
    except:
        pass
    
    inno_script = f'''[Setup]
; Informaci√≥n b√°sica
AppName={school_name}
AppVersion={version}
AppVerName={school_name} v{version}
AppPublisher=Sistema de Constancias
AppPublisherURL=https://constancias.edu.mx
AppSupportURL=https://constancias.edu.mx/soporte
AppUpdatesURL=https://constancias.edu.mx/actualizaciones

; Directorios de instalaci√≥n
DefaultDirName={{autopf}}\\SistemaConstancias
DefaultGroupName=Sistema de Constancias
AllowNoIcons=yes

; Configuraci√≥n de salida
OutputDir=installer\\output
OutputBaseFilename=SistemaConstancias_Installer_v{version}
SetupIconFile=installer\\source\\app\\resources\\images\\logos\\logo_educacion.png

; Compresi√≥n
Compression=lzma2
SolidCompression=yes

; Configuraci√≥n de Windows
WizardStyle=modern
DisableProgramGroupPage=yes
LicenseFile=installer\\scripts\\license.txt
InfoBeforeFile=installer\\scripts\\readme.txt

; Privilegios
PrivilegesRequired=admin
ArchitecturesAllowed=x64
ArchitecturesInstallIn64BitMode=x64

[Languages]
Name: "spanish"; MessagesFile: "compiler:Languages\\Spanish.isl"

[Tasks]
Name: "desktopicon"; Description: "{{cm:CreateDesktopIcon}}"; GroupDescription: "{{cm:AdditionalIcons}}"; Flags: unchecked
Name: "quicklaunchicon"; Description: "{{cm:CreateQuickLaunchIcon}}"; GroupDescription: "{{cm:AdditionalIcons}}"; Flags: unchecked; OnlyBelowVersion: 6.1

[Files]
; Aplicaci√≥n principal (archivos Python)
Source: "installer\\source\\app\\*"; DestDir: "{{app}}"; Flags: ignoreversion recursesubdirs createallsubdirs

; Archivos de configuraci√≥n
Source: "installer\\source\\config\\*"; DestDir: "{{userappdata}}\\SistemaConstancias"; Flags: ignoreversion onlyifdoesntexist

; Dependencias
Source: "installer\\source\\dependencies\\vcredist_x64.exe"; DestDir: "{{tmp}}"; Flags: deleteafterinstall
Source: "installer\\source\\dependencies\\wkhtmltopdf.exe"; DestDir: "{{tmp}}"; Flags: deleteafterinstall
Source: "installer\\source\\dependencies\\python-3.12.5-amd64.exe"; DestDir: "{{tmp}}"; Flags: deleteafterinstall

; Script de launcher
Source: "installer\\scripts\\launcher.bat"; DestDir: "{{app}}"; Flags: ignoreversion

[Icons]
Name: "{{group}}\\Sistema de Constancias"; Filename: "{{app}}\\launcher.bat"
Name: "{{group}}\\Interfaz con IA"; Filename: "{{app}}\\launcher.bat"; Parameters: "ai"
Name: "{{group}}\\Interfaz Tradicional"; Filename: "{{app}}\\launcher.bat"; Parameters: "traditional"
Name: "{{group}}\\{{cm:UninstallProgram,Sistema de Constancias}}"; Filename: "{{uninstallexe}}"
Name: "{{commondesktop}}\\Sistema de Constancias"; Filename: "{{app}}\\launcher.bat"; Tasks: desktopicon
Name: "{{userappdata}}\\Microsoft\\Internet Explorer\\Quick Launch\\Sistema de Constancias"; Filename: "{{app}}\\launcher.bat"; Tasks: quicklaunchicon

[Run]
; Instalar Python
Filename: "{{tmp}}\\python-3.12.5-amd64.exe"; Parameters: "/quiet InstallAllUsers=1 PrependPath=1"; StatusMsg: "Instalando Python 3.12.5..."; Flags: waituntilterminated

; Instalar Visual C++ Redistributables
Filename: "{{tmp}}\\vcredist_x64.exe"; Parameters: "/quiet /norestart"; StatusMsg: "Instalando Visual C++ Redistributables..."; Flags: waituntilterminated

; Instalar wkhtmltopdf
Filename: "{{tmp}}\\wkhtmltopdf.exe"; Parameters: "/S"; StatusMsg: "Instalando wkhtmltopdf..."; Flags: waituntilterminated

; Instalar dependencias Python
Filename: "python"; Parameters: "-m pip install -r ""{{app}}\\requirements.txt"""; WorkingDir: "{{app}}"; StatusMsg: "Instalando dependencias Python..."; Flags: waituntilterminated

; Ejecutar aplicaci√≥n al finalizar
Filename: "{{app}}\\launcher.bat"; Description: "{{cm:LaunchProgram,Sistema de Constancias}}"; Flags: nowait postinstall skipifsilent

[UninstallDelete]
Type: filesandordirs; Name: "{{userappdata}}\\SistemaConstancias"

[Code]
function GetUninstallString(): String;
var
  sUnInstPath: String;
  sUnInstallString: String;
begin
  sUnInstPath := ExpandConstant('Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\{{#SetupSetting("AppId")}}_is1');
  sUnInstallString := '';
  if not RegQueryStringValue(HKLM, sUnInstPath, 'UninstallString', sUnInstallString) then
    RegQueryStringValue(HKCU, sUnInstPath, 'UninstallString', sUnInstallString);
  Result := sUnInstallString;
end;

function IsUpgrade(): Boolean;
begin
  Result := (GetUninstallString() <> '');
end;

function UnInstallOldVersion(): Integer;
var
  sUnInstallString: String;
  iResultCode: Integer;
begin
  Result := 0;
  sUnInstallString := GetUninstallString();
  if sUnInstallString <> '' then begin
    sUnInstallString := RemoveQuotes(sUnInstallString);
    if Exec(sUnInstallString, '/SILENT /NORESTART /SUPPRESSMSGBOXES','', SW_HIDE, ewWaitUntilTerminated, iResultCode) then
      Result := 3
    else
      Result := 2;
  end else
    Result := 1;
end;

procedure CurStepChanged(CurStep: TSetupStep);
begin
  if (CurStep=ssInstall) then
  begin
    if (IsUpgrade()) then
    begin
      UnInstallOldVersion();
    end;
  end;
end;
'''
    
    script_path = Path("installer/SistemaConstancias.iss")
    with open(script_path, "w", encoding="utf-8") as f:
        f.write(inno_script)
    
    print(f"‚úÖ Script creado: {script_path}")
    return True

def create_support_files():
    """Crea archivos de soporte para el instalador"""
    print("\nüìÑ CREANDO ARCHIVOS DE SOPORTE")
    print("=" * 50)
    
    # Crear directorio de scripts
    scripts_dir = Path("installer/scripts")
    scripts_dir.mkdir(exist_ok=True)
    
    # Archivo de licencia
    license_text = """LICENCIA DE USO - SISTEMA DE CONSTANCIAS ESCOLARES

Copyright (c) 2024 Sistema de Constancias

Se concede permiso para usar este software bajo los siguientes t√©rminos:

1. Este software se proporciona "tal como est√°", sin garant√≠as de ning√∫n tipo.
2. El uso de este software es bajo su propio riesgo.
3. No se permite la redistribuci√≥n sin autorizaci√≥n expresa.
4. El soporte t√©cnico est√° disponible para usuarios registrados.

Para m√°s informaci√≥n, contacte: soporte@constancias.edu.mx
"""
    
    with open(scripts_dir / "license.txt", "w", encoding="utf-8") as f:
        f.write(license_text)
    
    # Archivo README
    readme_text = """SISTEMA DE CONSTANCIAS ESCOLARES
================================

¬°Gracias por elegir nuestro Sistema de Constancias!

CARACTER√çSTICAS:
- Generaci√≥n autom√°tica de constancias de estudios, calificaciones y traslado
- Interfaz tradicional e interfaz con Inteligencia Artificial
- Base de datos integrada para gesti√≥n de alumnos
- Plantillas personalizables
- Exportaci√≥n a PDF de alta calidad

REQUISITOS DEL SISTEMA:
- Windows 10 o superior (64-bit)
- 4 GB de RAM m√≠nimo
- 500 MB de espacio en disco
- Conexi√≥n a internet (para funciones de IA)

INSTALACI√ìN:
Este instalador configurar√° autom√°ticamente todas las dependencias necesarias.

SOPORTE:
- Email: soporte@constancias.edu.mx
- Documentaci√≥n: https://constancias.edu.mx/docs
- Actualizaciones: https://constancias.edu.mx/updates

¬°Esperamos que disfrute usando el sistema!
"""
    
    with open(scripts_dir / "readme.txt", "w", encoding="utf-8") as f:
        f.write(readme_text)

    # Crear script launcher.bat
    launcher_script = """@echo off
cd /d "%~dp0"
python simple_launcher.py %*
if errorlevel 1 (
    echo.
    echo Error ejecutando la aplicacion. Presiona cualquier tecla para continuar...
    pause >nul
)
"""

    with open(scripts_dir / "launcher.bat", "w", encoding="utf-8") as f:
        f.write(launcher_script)

    print("‚úÖ Archivos de soporte creados")
    print("‚úÖ Script launcher.bat creado")
    return True

def main():
    """Funci√≥n principal"""
    print("üõ†Ô∏è PREPARANDO INSTALADOR PROFESIONAL")
    print("=" * 70)

    try:
        # Paso 0: Verificar prerequisitos
        if not check_prerequisites():
            print("‚ùå Prerequisitos no cumplidos")
            return False

        # Paso 1: Crear estructura
        create_installer_structure()

        # Paso 2: Copiar archivos de aplicaci√≥n
        if not copy_application_files():
            print("‚ùå Error copiando archivos de aplicaci√≥n")
            return False
        
        # Paso 3: Descargar dependencias
        download_dependencies()
        
        # Paso 4: Crear script de Inno Setup
        create_installer_script()
        
        # Paso 5: Crear archivos de soporte
        create_support_files()
        
        print("\n" + "=" * 70)
        print("üéâ PREPARACI√ìN COMPLETADA")
        print("=" * 70)
        print("‚úÖ Estructura del instalador creada")
        print("‚úÖ Archivos de aplicaci√≥n copiados")
        print("‚úÖ Script de Inno Setup generado")
        print("‚úÖ Archivos de soporte creados")
        print("\nüìã PR√ìXIMOS PASOS:")
        print("1. Instalar Inno Setup desde: https://jrsoftware.org/isdl.php")
        print("2. Abrir: installer/SistemaConstancias.iss")
        print("3. Compilar el instalador")
        print("4. Probar en m√°quina limpia")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå Error durante la preparaci√≥n: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = main()
    input("\nPresiona Enter para continuar...")
    exit(0 if success else 1)
