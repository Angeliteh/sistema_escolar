"""
üß† MASTER KNOWLEDGE - CEREBRO DEL SISTEMA
Conocimiento profundo de capacidades, limitaciones y mejores pr√°cticas
"""

from typing import Dict, List, Optional, Any
import logging

class MasterKnowledge:
    """
    üß† CEREBRO DEL MASTER - Conocimiento profundo del sistema escolar
    
    PROP√ìSITO:
    - Entender capacidades y limitaciones de cada interpreter
    - Validar factibilidad antes de delegar
    - Sugerir alternativas cuando algo no es posible
    - Interpretar reportes de manera inteligente
    """
    
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        
        # üéØ MAPA COMPLETO DE INTERPRETERS Y CAPACIDADES
        self.interpreters_map = {
            "StudentQueryInterpreter": {
                "domain": "Gesti√≥n completa de alumnos y documentos escolares",
                "database_info": {
                    "total_students": 211,
                    "grades": "1¬∞ a 6¬∞ grado",
                    "structure": "alumnos + datos_escolares (con calificaciones JSON)"
                },
                "intentions": {
                    "consulta_alumnos": {
                        "description": "TODO sobre estudiantes - b√∫squedas, estad√≠sticas, constancias",
                        "sub_intentions": {
                            "busqueda_simple": {
                                "description": "Buscar alumnos con 1-2 criterios b√°sicos",
                                "capabilities": ["CURP", "matr√≠cula", "nombre", "grado", "grupo", "turno"],
                                "examples": ["buscar Garc√≠a", "alumnos de 3er grado", "CURP RARR150330..."]
                            },
                            "busqueda_compleja": {
                                "description": "B√∫squedas con m√∫ltiples criterios o campos especiales",
                                "capabilities": ["criterios combinados", "filtros m√∫ltiples"],
                                "examples": ["Garc√≠a de 3er grado turno matutino"]
                            },
                            "busqueda_filtrada": {
                                "description": "Filtros sobre resultados existentes en contexto",
                                "capabilities": ["filtrar por grupo", "filtrar por turno", "filtrar por criterios"],
                                "examples": ["de esos dame los del grupo B", "de la lista anterior los del turno matutino"]
                            },
                            "estadisticas": {
                                "description": "An√°lisis num√©rico y distribuciones",
                                "capabilities": {
                                    "available": [
                                        "conteos simples (cu√°ntos alumnos)",
                                        "conteos agrupados (por grado, turno, grupo)",
                                        "distribuciones porcentuales",
                                        "promedio de edad (calculado desde fecha_nacimiento)"
                                    ],
                                    "limited": [
                                        "promedio de calificaciones (JSON complejo, an√°lisis b√°sico)"
                                    ],
                                    "not_available": [
                                        "rankings de estudiantes",
                                        "comparaciones entre grupos",
                                        "an√°lisis por materia espec√≠fica"
                                    ]
                                },
                                "examples": ["cu√°ntos alumnos hay", "distribuci√≥n por grados"]
                            },
                            "generar_constancia": {
                                "description": "Generaci√≥n de documentos PDF oficiales",
                                "capabilities": {
                                    "types": ["estudios", "calificaciones", "traslado"],
                                    "options": ["con foto", "sin foto"],
                                    "formats": ["PDF oficial con membrete escolar"]
                                },
                                "examples": ["constancia para Juan P√©rez", "certificado con foto"]
                            }
                        }
                    },
                    "transformacion_pdf": {
                        "description": "Conversi√≥n de PDFs cargados a diferentes formatos",
                        "capabilities": ["PDF ‚Üí constancia estudios", "PDF ‚Üí constancia traslado"],
                        "examples": ["transformar PDF cargado", "convertir a constancia de traslado"],
                        "sub_intentions": {
                            "transformacion_pdf": {
                                "description": "Transformar PDF cargado a constancia espec√≠fica",
                                "examples": ["transformar a constancia de traslado", "convertir PDF a constancia de estudios"]
                            }
                        }
                    }
                },
                "technical_limitations": {
                    "calificaciones_json": {
                        "issue": "Calificaciones almacenadas en JSON, no tabla separada",
                        "impact": "An√°lisis por materia espec√≠fica es complejo",
                        "workaround": "Solo an√°lisis general de presencia/ausencia"
                    },
                    "advanced_analytics": {
                        "issue": "Rankings y comparaciones en desarrollo",
                        "alternatives": ["distribuciones", "conteos agrupados", "promedios generales"]
                    }
                }
            },
            
            "HelpInterpreter": {
                "domain": "Ayuda y explicaciones del sistema",
                "intentions": {
                    "ayuda_sistema": {
                        "description": "Explicaciones sobre capacidades y uso",
                        "sub_intentions": {
                            "pregunta_capacidades": {
                                "description": "¬øQu√© puede hacer el sistema?",
                                "examples": ["qu√© puedes hacer", "qu√© tipos de constancias generas"]
                            },
                            "pregunta_tecnica": {
                                "description": "¬øC√≥mo funciona algo espec√≠fico?",
                                "examples": ["c√≥mo buscar alumnos", "c√≥mo generar constancias"]
                            }
                        }
                    }
                }
            },
            
            "GeneralInterpreter": {
                "domain": "Conversaci√≥n general y temas no escolares",
                "status": "planned",
                "intentions": {
                    "conversacion_general": {
                        "description": "Chat casual, saludos, temas generales",
                        "examples": ["hola", "c√≥mo est√°s", "cu√©ntame un chiste"]
                    }
                }
            }
        }
    
    def can_handle_request(self, intention_type: str, sub_intention: str = None, 
                          query_details: dict = None) -> Dict[str, Any]:
        """
        üéØ EVAL√öA SI EL SISTEMA PUEDE MANEJAR UNA SOLICITUD
        
        Returns:
        {
            "can_handle": bool,
            "confidence": float,
            "limitations": list,
            "alternatives": list,
            "explanation": str,
            "best_interpreter": str
        }
        """
        try:
            # Buscar el interpreter que maneja esta intenci√≥n
            for interpreter_name, interpreter_info in self.interpreters_map.items():
                intentions = interpreter_info.get("intentions", {})
                
                if intention_type in intentions:
                    intention_info = intentions[intention_type]
                    
                    # Evaluar sub-intenci√≥n si se proporciona
                    if sub_intention:
                        sub_intentions = intention_info.get("sub_intentions", {})
                        if sub_intention in sub_intentions:
                            sub_info = sub_intentions[sub_intention]
                            return self._evaluate_capability(
                                interpreter_name, intention_type, sub_intention, 
                                sub_info, query_details
                            )
                    else:
                        # Evaluar intenci√≥n general
                        return self._evaluate_general_capability(
                            interpreter_name, intention_type, intention_info, query_details
                        )
            
            # No se encontr√≥ handler - generar explicaci√≥n natural
            user_query = query_details.get("original_query", "") if query_details else ""
            natural_explanation = self._generate_natural_limitation_explanation(intention_type, user_query)

            return {
                "can_handle": False,
                "confidence": 0.0,
                "limitations": ["Funcionalidad no disponible"],
                "alternatives": self._suggest_natural_alternatives(),
                "explanation": natural_explanation,
                "best_interpreter": None
            }
            
        except Exception as e:
            self.logger.error(f"Error evaluando capacidad: {e}")
            return {
                "can_handle": False,
                "confidence": 0.0,
                "limitations": [f"Error interno: {str(e)}"],
                "alternatives": [],
                "explanation": "Error evaluando la solicitud",
                "best_interpreter": None
            }
    
    def _evaluate_capability(self, interpreter_name: str, intention: str, 
                           sub_intention: str, sub_info: dict, query_details: dict) -> Dict[str, Any]:
        """üîç EVAL√öA CAPACIDAD ESPEC√çFICA DE UNA SUB-INTENCI√ìN"""
        
        # Casos especiales para estad√≠sticas
        if sub_intention in ["estadisticas", "conteo_simple", "estadistica_distribucion"]:
            return self._evaluate_statistics_capability(query_details)
        
        # Casos especiales para b√∫squedas
        if sub_intention in ["busqueda_simple", "busqueda_compleja"]:
            return self._evaluate_search_capability(sub_intention, query_details)
        
        # Casos especiales para constancias
        if sub_intention == "generar_constancia":
            return self._evaluate_constancia_capability(query_details)

        # Casos especiales para transformaciones de PDF
        if sub_intention == "transformacion_pdf" or intention == "transformacion_pdf":
            return self._evaluate_transformation_capability(query_details)

        # Capacidad general disponible
        return {
            "can_handle": True,
            "confidence": 0.9,
            "limitations": [],
            "alternatives": [],
            "explanation": f"Capacidad '{sub_intention}' disponible en {interpreter_name}",
            "best_interpreter": interpreter_name
        }
    
    def _evaluate_statistics_capability(self, query_details: dict) -> Dict[str, Any]:
        """üìä EVAL√öA CAPACIDADES ESTAD√çSTICAS ESPEC√çFICAS"""
        
        query_text = query_details.get("original_query", "").lower() if query_details else ""
        
        # Detectar solicitudes no disponibles
        if any(word in query_text for word in ["ranking", "mejor", "peor", "comparar"]):
            return {
                "can_handle": False,
                "confidence": 0.3,
                "limitations": ["Rankings y comparaciones est√°n en desarrollo"],
                "alternatives": [
                    "Puedo mostrar distribuciones por grado",
                    "Puedo calcular conteos agrupados",
                    "Puedo generar estad√≠sticas generales"
                ],
                "explanation": "Los rankings no est√°n disponibles en este momento, pero puedo ofrecer an√°lisis alternativos",
                "best_interpreter": "StudentQueryInterpreter"
            }
        
        # Detectar an√°lisis por materia espec√≠fica
        materias = ["matem√°ticas", "espa√±ol", "ciencias", "historia", "geograf√≠a"]
        if any(materia in query_text for materia in materias):
            return {
                "can_handle": False,
                "confidence": 0.4,
                "limitations": ["An√°lisis por materia espec√≠fica es limitado (calificaciones en JSON)"],
                "alternatives": [
                    "Puedo calcular promedio general de calificaciones",
                    "Puedo mostrar qui√©n tiene/no tiene calificaciones",
                    "Puedo generar distribuciones por grado"
                ],
                "explanation": "El an√°lisis por materia espec√≠fica tiene limitaciones t√©cnicas",
                "best_interpreter": "StudentQueryInterpreter"
            }
        
        # Estad√≠sticas disponibles
        return {
            "can_handle": True,
            "confidence": 0.95,
            "limitations": ["Promedios de calificaciones son b√°sicos (JSON)"],
            "alternatives": [],
            "explanation": "Estad√≠sticas b√°sicas y distribuciones est√°n completamente disponibles",
            "best_interpreter": "StudentQueryInterpreter"
        }

    def _evaluate_search_capability(self, sub_intention: str, query_details: dict) -> Dict[str, Any]:
        """üîç EVAL√öA CAPACIDADES DE B√öSQUEDA"""

        # Todas las b√∫squedas est√°n disponibles
        return {
            "can_handle": True,
            "confidence": 0.98,
            "limitations": [],
            "alternatives": [],
            "explanation": f"B√∫squedas {sub_intention} completamente disponibles",
            "best_interpreter": "StudentQueryInterpreter"
        }

    def _evaluate_constancia_capability(self, query_details: dict) -> Dict[str, Any]:
        """üìÑ EVAL√öA CAPACIDADES DE CONSTANCIAS"""

        # Todas las constancias est√°n disponibles
        return {
            "can_handle": True,
            "confidence": 0.98,
            "limitations": [],
            "alternatives": [],
            "explanation": "Generaci√≥n de constancias completamente disponible",
            "best_interpreter": "StudentQueryInterpreter"
        }

    def _evaluate_transformation_capability(self, query_details: dict) -> Dict[str, Any]:
        """üîÑ EVAL√öA CAPACIDADES DE TRANSFORMACI√ìN DE PDF"""

        # Transformaciones de PDF est√°n disponibles
        return {
            "can_handle": True,
            "confidence": 0.95,
            "limitations": ["Requiere PDF cargado previamente"],
            "alternatives": [],
            "explanation": "Transformaci√≥n de PDF a constancias completamente disponible",
            "best_interpreter": "StudentQueryInterpreter"
        }

    def _evaluate_general_capability(self, interpreter_name: str, intention: str,
                                   intention_info: dict, query_details: dict) -> Dict[str, Any]:
        """üéØ EVAL√öA CAPACIDAD GENERAL DE UNA INTENCI√ìN"""

        return {
            "can_handle": True,
            "confidence": 0.9,
            "limitations": [],
            "alternatives": [],
            "explanation": f"Intenci√≥n '{intention}' disponible en {interpreter_name}",
            "best_interpreter": interpreter_name
        }

    def _suggest_general_alternatives(self) -> List[str]:
        """üí° SUGIERE ALTERNATIVAS GENERALES"""

        return [
            "Puedo buscar informaci√≥n de alumnos",
            "Puedo generar estad√≠sticas y conteos",
            "Puedo crear constancias oficiales",
            "Puedo explicar las capacidades del sistema"
        ]

    def _suggest_natural_alternatives(self) -> List[str]:
        """üí° SUGIERE ALTERNATIVAS DE MANERA NATURAL"""

        return [
            "Buscar informaci√≥n de estudiantes",
            "Generar estad√≠sticas y conteos",
            "Crear constancias oficiales",
            "Obtener ayuda sobre el sistema"
        ]

    def _generate_natural_limitation_explanation(self, intention_type: str, user_query: str) -> str:
        """üé≠ GENERA EXPLICACIONES NATURALES PARA LIMITACIONES"""

        # Mapeo de intenciones t√©cnicas a explicaciones naturales
        natural_explanations = {
            "consulta_alumnos": self._explain_student_query_limitation(user_query),
            "generar_constancia": "La generaci√≥n de constancias requiere informaci√≥n espec√≠fica del estudiante",
            "estadistica": self._explain_statistics_limitation(user_query),
            "transformacion": "La transformaci√≥n de documentos no est√° disponible en este momento",
            "ayuda_sistema": "Esa funci√≥n de ayuda espec√≠fica no est√° disponible",
            "aclaracion_requerida": self._explain_clarification_limitation(user_query)
        }

        return natural_explanations.get(intention_type, "Esa funcionalidad no est√° disponible en este momento")

    def _explain_student_query_limitation(self, user_query: str) -> str:
        """üéì EXPLICA LIMITACIONES DE CONSULTAS DE ESTUDIANTES"""

        query_lower = user_query.lower()

        if any(word in query_lower for word in ["ranking", "mejor", "peor", "comparar"]):
            return "Los rankings de estudiantes no est√°n disponibles en este momento"
        elif any(word in query_lower for word in ["matem√°ticas", "espa√±ol", "ciencias", "historia"]):
            return "El an√°lisis por materia espec√≠fica tiene limitaciones t√©cnicas"
        else:
            return "Esa consulta espec√≠fica no est√° disponible"

    def _explain_statistics_limitation(self, user_query: str) -> str:
        """üìä EXPLICA LIMITACIONES DE ESTAD√çSTICAS"""

        query_lower = user_query.lower()

        if any(word in query_lower for word in ["ranking", "mejor", "peor"]):
            return "Los rankings y comparaciones est√°n en desarrollo"
        elif any(word in query_lower for word in ["promedio", "materia"]):
            return "Los promedios por materia espec√≠fica tienen limitaciones t√©cnicas"
        else:
            # üîß ARREGLO: No rechazar conteos b√°sicos que S√ç est√°n disponibles
            return "Estad√≠sticas b√°sicas y conteos est√°n disponibles"

    def _explain_clarification_limitation(self, user_query: str) -> str:
        """‚ùì EXPLICA LIMITACIONES DE ACLARACIONES"""

        return "No pude entender completamente tu solicitud"

    def interpret_student_report(self, student_data: dict, original_query: str) -> Dict[str, Any]:
        """
        üîç INTERPRETA REPORTES DEL STUDENT DE MANERA INTELIGENTE

        Analiza qu√© pas√≥ internamente y sugiere mejoras o alternativas
        """
        try:
            action_used = student_data.get("action", "")
            row_count = student_data.get("row_count", 0)
            success = student_data.get("success", True)

            # An√°lisis por tipo de acci√≥n
            if "BUSCAR" in action_used:
                return self._interpret_search_report(student_data, original_query)
            elif "CALCULAR_ESTADISTICA" in action_used:
                return self._interpret_statistics_report(student_data, original_query)
            elif "GENERAR_CONSTANCIA" in action_used:
                return self._interpret_constancia_report(student_data, original_query)
            elif "TRANSFORMAR" in action_used:
                return self._interpret_transformation_report(student_data, original_query)
            else:
                return self._interpret_general_report(student_data, original_query)

        except Exception as e:
            self.logger.error(f"Error interpretando reporte: {e}")
            return {
                "interpretation": "Error analizando el reporte del sistema",
                "suggestions": ["Intenta reformular la consulta"],
                "user_explanation": "Hubo un problema interno analizando los resultados"
            }

    def _interpret_search_report(self, student_data: dict, original_query: str) -> Dict[str, Any]:
        """üîç INTERPRETA REPORTES DE B√öSQUEDA"""

        row_count = student_data.get("row_count", 0)

        if row_count == 0:
            # Analizar por qu√© no encontr√≥ nada
            if "curp" in original_query.lower():
                return {
                    "interpretation": "CURP no encontrada en la base de datos",
                    "suggestions": [
                        "Verificar que la CURP est√© bien escrita (18 caracteres)",
                        "Buscar por nombre en su lugar",
                        "Verificar que el alumno est√© registrado"
                    ],
                    "user_explanation": "No encontr√© esa CURP. Podr√≠a estar mal escrita o el alumno no est√° registrado."
                }
            elif "matricula" in original_query.lower():
                return {
                    "interpretation": "Matr√≠cula no encontrada",
                    "suggestions": [
                        "Verificar el formato de la matr√≠cula",
                        "Buscar por nombre del alumno",
                        "Revisar si la matr√≠cula est√° actualizada"
                    ],
                    "user_explanation": "No encontr√© esa matr√≠cula. ¬øQuieres buscar por nombre?"
                }
            else:
                return {
                    "interpretation": "Criterio de b√∫squeda no encontrado",
                    "suggestions": [
                        "Intentar con criterios m√°s amplios",
                        "Verificar ortograf√≠a",
                        "Usar b√∫squeda parcial (solo apellido)"
                    ],
                    "user_explanation": "No encontr√© coincidencias. Intenta con criterios m√°s amplios."
                }

        elif row_count == 1:
            return {
                "interpretation": "B√∫squeda exitosa - alumno espec√≠fico encontrado",
                "suggestions": [
                    "Puedes generar una constancia para este alumno",
                    "Puedes pedir informaci√≥n m√°s detallada"
                ],
                "user_explanation": "¬°Perfecto! Encontr√© exactamente al alumno que buscas."
            }

        elif row_count <= 10:
            return {
                "interpretation": "B√∫squeda exitosa - lista peque√±a manejable",
                "suggestions": [
                    "Puedes filtrar por criterios adicionales",
                    "Puedes seleccionar un alumno espec√≠fico",
                    "Puedes generar constancias para varios"
                ],
                "user_explanation": f"Encontr√© {row_count} alumnos. ¬øQuieres filtrar m√°s o seleccionar uno espec√≠fico?"
            }

        else:
            return {
                "interpretation": "B√∫squeda exitosa - lista grande",
                "suggestions": [
                    "Agregar filtros para reducir resultados",
                    "Buscar por criterios m√°s espec√≠ficos",
                    "Filtrar por grado, grupo o turno"
                ],
                "user_explanation": f"Encontr√© {row_count} alumnos. Te recomiendo filtrar por grado, grupo o turno."
            }

    def _interpret_statistics_report(self, student_data: dict, original_query: str) -> Dict[str, Any]:
        """üìä INTERPRETA REPORTES DE ESTAD√çSTICAS"""

        row_count = student_data.get("row_count", 0)

        if row_count == 0:
            return {
                "interpretation": "No se pudieron calcular estad√≠sticas",
                "suggestions": [
                    "Verificar que hay datos en la base",
                    "Intentar con criterios m√°s amplios",
                    "Revisar filtros aplicados"
                ],
                "user_explanation": "No pude calcular estad√≠sticas con esos criterios."
            }

        elif "distribuci√≥n" in original_query.lower() or "distribucion" in original_query.lower():
            return {
                "interpretation": "Distribuci√≥n calculada exitosamente",
                "suggestions": [
                    "Puedes filtrar por criterios espec√≠ficos",
                    "Puedes generar constancias para grupos espec√≠ficos",
                    "Puedes pedir an√°lisis m√°s detallado"
                ],
                "user_explanation": f"¬°Perfecto! Calcul√© la distribuci√≥n con {row_count} grupos."
            }

        else:
            return {
                "interpretation": "Estad√≠sticas calculadas exitosamente",
                "suggestions": [
                    "Puedes pedir an√°lisis m√°s espec√≠ficos",
                    "Puedes filtrar por subgrupos",
                    "Puedes generar reportes detallados"
                ],
                "user_explanation": f"Estad√≠sticas calculadas exitosamente ({row_count} resultados)."
            }

    def _interpret_constancia_report(self, student_data: dict, original_query: str) -> Dict[str, Any]:
        """üìÑ INTERPRETA REPORTES DE CONSTANCIAS"""

        success = student_data.get("success", True)

        if success:
            return {
                "interpretation": "Constancia generada exitosamente",
                "suggestions": [
                    "Puedes descargar el PDF",
                    "Puedes generar m√°s constancias",
                    "Puedes modificar el formato si necesitas"
                ],
                "user_explanation": "¬°Constancia generada exitosamente! Ya puedes descargarla."
            }
        else:
            return {
                "interpretation": "Error generando constancia",
                "suggestions": [
                    "Verificar que el alumno existe",
                    "Revisar que los datos est√©n completos",
                    "Intentar con otro tipo de constancia"
                ],
                "user_explanation": "Hubo un problema generando la constancia. Verifica los datos del alumno."
            }

    def _interpret_transformation_report(self, student_data: dict, original_query: str) -> Dict[str, Any]:
        """üîÑ INTERPRETA REPORTES DE TRANSFORMACIONES"""

        success = student_data.get("success", True)

        if success:
            return {
                "interpretation": "Transformaci√≥n de PDF exitosa",
                "suggestions": [
                    "Puedes comparar con el original",
                    "Puedes descargar el nuevo formato",
                    "Puedes hacer m√°s transformaciones"
                ],
                "user_explanation": "¬°PDF transformado exitosamente! Revisa el resultado."
            }
        else:
            return {
                "interpretation": "Error en transformaci√≥n de PDF",
                "suggestions": [
                    "Verificar que el PDF est√© cargado",
                    "Revisar el formato del archivo",
                    "Intentar cargar el PDF nuevamente"
                ],
                "user_explanation": "Hubo un problema transformando el PDF. Verifica que est√© bien cargado."
            }

    def _interpret_general_report(self, student_data: dict, original_query: str) -> Dict[str, Any]:
        """üéØ INTERPRETA REPORTES GENERALES"""

        return {
            "interpretation": "Operaci√≥n completada",
            "suggestions": [
                "Puedes hacer m√°s consultas",
                "Puedes pedir informaci√≥n adicional",
                "Puedes generar documentos relacionados"
            ],
            "user_explanation": "Operaci√≥n completada exitosamente."
        }

    def get_system_capabilities_summary(self) -> str:
        """üìã RESUMEN DE CAPACIDADES DEL SISTEMA"""

        return """
üè´ SISTEMA ESCOLAR "PROF. MAXIMO GAMIZ FERNANDEZ"

üìä BASE DE DATOS: 211 alumnos (1¬∞ a 6¬∞ grado)

üéØ CAPACIDADES PRINCIPALES:

üîç B√öSQUEDAS:
‚Ä¢ Por CURP, matr√≠cula, nombre (completo o parcial)
‚Ä¢ Por grado, grupo, turno
‚Ä¢ Criterios combinados

üìä ESTAD√çSTICAS:
‚Ä¢ Conteos simples y agrupados
‚Ä¢ Distribuciones porcentuales
‚Ä¢ Promedio de edad
‚Ä¢ An√°lisis b√°sico de calificaciones

üìÑ CONSTANCIAS:
‚Ä¢ Estudios, calificaciones, traslado
‚Ä¢ Con o sin foto
‚Ä¢ Formato PDF oficial

üîÑ TRANSFORMACIONES:
‚Ä¢ PDF ‚Üí diferentes formatos de constancia
‚Ä¢ Comparaci√≥n con originales

‚ö†Ô∏è LIMITACIONES:
‚Ä¢ Rankings en desarrollo
‚Ä¢ An√°lisis por materia espec√≠fica limitado
‚Ä¢ Calificaciones en formato JSON (an√°lisis b√°sico)
"""
