"""
üéØ HELP INTERPRETER SIMPLIFICADO
Interpretador b√°sico de ayuda sin contexto propio para evitar interferencias.
"""

from typing import Optional
from app.core.ai.interpretation.base_interpreter import BaseInterpreter, InterpretationContext, InterpretationResult
from app.core.logging import get_logger

class HelpInterpreter(BaseInterpreter):
    """Interpretador simplificado de ayuda del sistema - SIN CONTEXTO PROPIO"""

    def __init__(self, gemini_client):
        super().__init__("HelpInterpreter")
        self.gemini_client = gemini_client
        self.logger = get_logger(__name__)
        self.logger.debug("‚úÖ HelpInterpreter SIMPLIFICADO inicializado")

    def _get_supported_actions(self):
        """Acciones soportadas por el int√©rprete de ayuda"""
        return ["ayuda_sistema", "ayuda_error"]

    def can_handle(self, context: InterpretationContext) -> bool:
        """El MasterInterpreter ya decidi√≥ que somos el int√©rprete correcto"""
        return True

    def interpret(self, context: InterpretationContext) -> Optional[InterpretationResult]:
        """
        üéØ HELP INTERPRETER CON FLUJO COMO STUDENT

        Sigue el patr√≥n del StudentInterpreter:
        1. Recibe intenci√≥n + sub-intenci√≥n del Master
        2. Ejecuta acci√≥n espec√≠fica basada en sub-intenci√≥n
        3. Retorna datos estructurados para respuesta humanizada del Master
        """
        try:
            self.logger.info(f"üîÑ [HELP] Iniciando procesamiento: '{context.user_message[:50]}...'")

            # üéØ OBTENER INFORMACI√ìN DEL MASTER (COMO STUDENT)
            intention_info = getattr(context, 'intention_info', {})
            sub_intention = intention_info.get('sub_intention', 'entender_capacidades')
            detected_entities = intention_info.get('detected_entities', {})

            self.logger.info(f"üì• [HELP] Sub-intenci√≥n del Master: {sub_intention}")
            self.logger.info(f"üì• [HELP] Entidades detectadas: {len(detected_entities)}")

            # üéØ EJECUTAR ACCI√ìN ESPEC√çFICA BASADA EN SUB-INTENCI√ìN
            if sub_intention in ["entender_capacidades", "pregunta_capacidades"]:
                return self._execute_capacidades_action(context.user_message, detected_entities)

            elif sub_intention in ["tutorial_uso", "pregunta_tecnica", "como_usar"]:
                return self._execute_tutorial_action(context.user_message, detected_entities)

            else:
                # Fallback: Si no reconoce la sub-intenci√≥n, mostrar capacidades
                self.logger.info(f"‚ö†Ô∏è [HELP] Sub-intenci√≥n no reconocida: {sub_intention} ‚Üí mostrando capacidades")
                return self._execute_capacidades_action(context.user_message, detected_entities)

        except Exception as e:
            self.logger.error(f"Error en HelpInterpreter: {e}")
            return self._create_error_result("Error interno procesando ayuda")

    def _execute_capacidades_action(self, user_query: str, detected_entities: dict) -> InterpretationResult:
        """Ejecuta acci√≥n para explicar capacidades REALES del sistema basadas en pruebas validadas"""
        try:
            self.logger.info("üéØ [HELP] Ejecutando acci√≥n: CAPACIDADES")

            help_content = {
                "tipo": "capacidades_sistema",
                "titulo": "¬øQu√© puedo hacer? - Sistema Escolar PROF. MAXIMO GAMIZ FERNANDEZ",
                "contenido": {
                    "busquedas_por_apellido": {
                        "descripcion": "Buscar alumnos por apellidos (‚úÖ Probado A1.1-A1.5)",
                        "ejemplos_reales": [
                            "busca alumnos con apellido MARTINEZ TORRES",
                            "estudiantes apellido DIAZ RODRIGUEZ",
                            "dame los RAMOS GUTIERREZ",
                            "buscar HERNANDEZ MENDOZA"
                        ],
                        "nota": "‚úÖ Funciona con apellidos compuestos reales"
                    },
                    "busquedas_por_nombre_completo": {
                        "descripcion": "Buscar por nombre y apellidos completos (‚úÖ Probado A2.1-A2.5)",
                        "ejemplos_reales": [
                            "buscar SOPHIA ROMERO GARCIA",
                            "informaci√≥n de ANDRES FLORES SANCHEZ",
                            "dame datos de ADRIANA TORRES RODRIGUEZ",
                            "estudiante PATRICIA TORRES TORRES"
                        ],
                        "nota": "‚úÖ B√∫squeda exacta con nombres completos"
                    },
                    "busquedas_por_criterios_academicos": {
                        "descripcion": "Filtrar por grado, grupo y turno (‚úÖ Probado A3.1-A3.5)",
                        "ejemplos_reales": [
                            "alumnos de 2 grado",
                            "estudiantes del turno VESPERTINO",
                            "alumnos de 3¬∞ A",
                            "estudiantes de 5 grado turno MATUTINO",
                            "alumnos del grupo B turno VESPERTINO"
                        ],
                        "nota": "‚úÖ Con interfaz colapsable para listas grandes"
                    },
                    "constancias_pdf_completas": {
                        "descripcion": "Generar documentos oficiales en PDF (‚úÖ Probado B1.1-B2.4)",
                        "tipos_validados": ["estudios", "calificaciones", "traslado"],
                        "ejemplos_reales": [
                            "constancia para NICOLAS GOMEZ DIAZ",
                            "constancia de estudios para ANDRES RUIZ SANCHEZ",
                            "constancia con foto para NATALIA MORALES SILVA",
                            "constancia para SOPHIA ROMERO GARCIA sin foto",
                            "constancia de traslado para ADRIANA TORRES RODRIGUEZ"
                        ],
                        "nota": "‚úÖ Genera PDFs reales instant√°neamente"
                    },
                    "estadisticas_y_conteos": {
                        "descripcion": "Obtener n√∫meros y distribuciones (‚úÖ Probado A5.1-A5.5)",
                        "ejemplos_reales": [
                            "cu√°ntos alumnos hay en total",
                            "distribuci√≥n por grado",
                            "estad√≠sticas por turno",
                            "cu√°ntos alumnos hay en 6 grado",
                            "estudiantes sin calificaciones",
                            "alumnos que tienen notas"
                        ],
                        "nota": "‚úÖ Con interfaz colapsable autom√°tica"
                    },
                    "continuaciones_contextuales": {
                        "descripcion": "Filtrar y refinar b√∫squedas anteriores (‚úÖ Probado B3.1-B3.3)",
                        "ejemplos_reales": [
                            "1. 'alumnos de segundo grado' ‚Üí 2. 'de esos los del turno vespertino'",
                            "1. 'buscar MARTINEZ' ‚Üí 2. 'constancia para el primero'",
                            "1. 'estudiantes de 3¬∞ A' ‚Üí 2. 'constancia para el tercer alumno de la lista'"
                        ],
                        "nota": "‚úÖ Referencias como 'el segundo', 'de esos', 'el primero'"
                    },
                    "filtros_de_calificaciones": {
                        "descripcion": "Buscar por estado de calificaciones (‚úÖ Probado A4.4-A4.5)",
                        "ejemplos_reales": [
                            "estudiantes sin calificaciones",
                            "alumnos que tienen notas",
                            "estudiantes con calificaciones registradas"
                        ],
                        "nota": "‚úÖ Verificaci√≥n b√°sica implementada"
                    }
                },
                "datos_sistema": {
                    "total_alumnos": 211,
                    "grados": "1¬∞ a 6¬∞ grado",
                    "turnos": ["MATUTINO", "VESPERTINO"],
                    "grupos": ["A", "B"],
                    "estado_pruebas": "‚úÖ 25+ casos cr√≠ticos validados en BATERIA_PRUEBAS_MASTER_STUDENT.md"
                }
            }

            return self._create_success_result("AYUDA_CAPACIDADES", help_content, "Capacidades reales del sistema explicadas")

        except Exception as e:
            self.logger.error(f"Error en acci√≥n capacidades: {e}")
            return self._create_error_result("Error explicando capacidades")

    def _execute_tutorial_action(self, user_query: str, detected_entities: dict) -> InterpretationResult:
        """Ejecuta acci√≥n para generar tutoriales basados en casos REALES probados"""
        try:
            self.logger.info("üéØ [HELP] Ejecutando acci√≥n: TUTORIAL")

            help_content = {
                "tipo": "tutorial_uso",
                "titulo": "Tutorial Paso a Paso - Casos Reales Probados",
                "pasos": [
                    {
                        "paso": 1,
                        "titulo": "üîç B√∫squedas B√°sicas (‚úÖ Probado)",
                        "descripcion": "Buscar alumnos por nombre, apellido o criterios acad√©micos",
                        "ejemplos_reales": [
                            "buscar MARTINEZ TORRES",
                            "estudiante PATRICIA TORRES TORRES",
                            "alumnos de 3¬∞ A",
                            "estudiantes del turno vespertino"
                        ],
                        "resultado": "Lista de alumnos con interfaz colapsable si son muchos"
                    },
                    {
                        "paso": 2,
                        "titulo": "üìÑ Generar Constancias (‚úÖ Probado)",
                        "descripcion": "Crear documentos PDF oficiales directamente",
                        "ejemplos_reales": [
                            "constancia para NICOLAS GOMEZ DIAZ",
                            "constancia de estudios para ANDRES RUIZ SANCHEZ",
                            "constancia con foto para NATALIA MORALES SILVA"
                        ],
                        "resultado": "PDF generado autom√°ticamente en panel derecho"
                    },
                    {
                        "paso": 3,
                        "titulo": "üîÑ Continuaciones Inteligentes (‚úÖ Probado)",
                        "descripcion": "Filtrar y refinar resultados anteriores",
                        "ejemplos_reales": [
                            "1. 'alumnos de segundo grado' ‚Üí 2. 'de esos los del turno vespertino'",
                            "1. 'buscar MARTINEZ' ‚Üí 2. 'constancia para el primero'"
                        ],
                        "resultado": "Sistema recuerda b√∫squedas anteriores autom√°ticamente"
                    },
                    {
                        "paso": 4,
                        "titulo": "üìä Estad√≠sticas y Conteos (‚úÖ Probado)",
                        "descripcion": "Obtener n√∫meros y distribuciones del sistema",
                        "ejemplos_reales": [
                            "cu√°ntos alumnos hay en total",
                            "distribuci√≥n por grado",
                            "estad√≠sticas por turno"
                        ],
                        "resultado": "Datos organizados con interfaz colapsable"
                    }
                ],
                "consejos": [
                    "üí° Usa nombres COMPLETOS para mejores resultados",
                    "üí° El sistema recuerda tu b√∫squeda anterior autom√°ticamente",
                    "üí° Puedes referenciar 'el primero', 'el segundo', etc.",
                    "üí° Las constancias se generan como PDF real instant√°neamente"
                ]
            }

            return self._create_success_result("AYUDA_TUTORIAL", help_content, "Tutorial con casos reales generado")

        except Exception as e:
            self.logger.error(f"Error en acci√≥n tutorial: {e}")
            return self._create_error_result("Error generando tutorial")

    # üóëÔ∏è M√âTODOS ELIMINADOS PARA SIMPLIFICAR A SOLO 2 ACCIONES:
    # - _execute_tipos_constancias_action() ‚Üí Incluido en CAPACIDADES
    # - _execute_como_usar_action() ‚Üí Fusionado con TUTORIAL
    # - _execute_ayuda_general_action() ‚Üí Fallback a CAPACIDADES

    def _create_success_result(self, action_name: str, help_content: dict, summary: str) -> InterpretationResult:
        """Crea resultado exitoso con datos estructurados para el Master"""
        help_data = {
            "technical_response": f"Ayuda generada: {action_name}",
            "data": help_content,
            "row_count": 1,
            "help_type": help_content.get("tipo", "general"),
            "query_category": "ayuda_sistema",
            "execution_summary": summary,
            "requires_master_response": True,  # ‚úÖ Master debe generar respuesta humanizada
            "student_action": action_name,
            "origen": "help_interpreter"
        }

        return InterpretationResult(
            action=action_name,
            parameters=help_data,
            confidence=0.9
        )

    def _create_error_result(self, error_message: str) -> InterpretationResult:
        """Crea resultado de error"""
        return InterpretationResult(
            action="ayuda_error",
            parameters={
                "message": f"‚ùå {error_message}",
                "error": "help_processing_error"
            },
            confidence=0.3
        )

    def _generate_basic_help_response(self, user_query: str) -> Optional[str]:
        """
        üéØ GENERA RESPUESTA B√ÅSICA DE AYUDA SIN CONTEXTO
        
        Responde consultas comunes sobre el sistema de manera simple y directa.
        """
        try:
            # üéØ PROMPT SIMPLIFICADO PARA AYUDA B√ÅSICA
            help_prompt = f"""
Eres el asistente de ayuda de la escuela "PROF. MAXIMO GAMIZ FERNANDEZ" üè´

CONSULTA DEL USUARIO: "{user_query}"

üéØ INFORMACI√ìN DEL SISTEMA:
- Base de datos: 211 alumnos de 1¬∞ a 6¬∞ grado
- Turnos: MATUTINO y VESPERTINO
- Grupos: A, B (principalmente)
- Funcionalidades principales:
  * B√∫squeda de alumnos por nombre, grado, grupo, turno
  * Generaci√≥n de constancias (estudios, calificaciones, traslado)
  * Estad√≠sticas y conteos
  * Transformaci√≥n de PDFs

üéØ CAPACIDADES PRINCIPALES:

**1. B√öSQUEDA DE ALUMNOS:**
- "buscar [nombre]" - Busca por nombre
- "alumnos de [grado]¬∞ [grupo]" - Por grado y grupo
- "estudiantes del turno [matutino/vespertino]" - Por turno
- "cu√°ntos alumnos hay en [criterio]" - Conteos

**2. CONSTANCIAS:**
- "constancia de estudios para [nombre]" - Constancia b√°sica
- "constancia de calificaciones para [nombre]" - Con notas
- "constancia de traslado para [nombre]" - Para cambio de escuela

**3. ESTAD√çSTICAS:**
- "cu√°ntos alumnos hay" - Total general
- "distribuci√≥n por grados" - Estad√≠sticas por grado
- "alumnos por turno" - Estad√≠sticas por turno

**4. EJEMPLOS PR√ÅCTICOS:**
- "buscar Garc√≠a" ‚Üí Encuentra alumnos con apellido Garc√≠a
- "alumnos de 3¬∞ A" ‚Üí Lista estudiantes de tercer grado grupo A
- "constancia de estudios para Juan P√©rez" ‚Üí Genera constancia
- "cu√°ntos hay en turno matutino" ‚Üí Cuenta alumnos del turno

üé≠ TU TAREA:
Responde de manera amigable y pr√°ctica, explicando:
1. Qu√© puede hacer el sistema relacionado con su pregunta
2. Ejemplos espec√≠ficos de c√≥mo usar las funciones
3. Sugerencias √∫tiles para aprovechar mejor el sistema

RESPONDE de manera conversacional, amigable y pr√°ctica. M√°ximo 4-5 l√≠neas.
"""

            # Enviar al LLM
            response = self.gemini_client.send_prompt_sync(help_prompt)
            
            if response and response.strip():
                return response.strip()
            else:
                # Fallback b√°sico
                return self._get_fallback_help_response(user_query)

        except Exception as e:
            self.logger.error(f"Error generando respuesta b√°sica de ayuda: {e}")
            return self._get_fallback_help_response(user_query)

    def _get_fallback_help_response(self, user_query: str) -> str:
        """Respuesta de fallback cuando el LLM no est√° disponible"""
        query_lower = user_query.lower()
        
        if any(word in query_lower for word in ["qu√© puedes", "qu√© haces", "capacidades", "funciones"]):
            return """¬°Hola! üëã Soy tu asistente escolar. Puedo ayudarte con:

üìö **B√∫squedas**: "buscar [nombre]", "alumnos de 3¬∞ A"
üìÑ **Constancias**: "constancia de estudios para [nombre]"
üìä **Estad√≠sticas**: "cu√°ntos alumnos hay", "distribuci√≥n por grados"

¬°Preg√∫ntame lo que necesites sobre los 211 estudiantes de nuestra escuela!"""

        elif any(word in query_lower for word in ["constancia", "certificado", "documento"]):
            return """Para generar constancias:

1. **Busca al alumno**: "buscar [nombre del alumno]"
2. **Solicita la constancia**: "constancia de [tipo] para [nombre]"

**Tipos disponibles**: estudios, calificaciones, traslado
**Ejemplo**: "constancia de estudios para Juan P√©rez"

¬°El sistema genera autom√°ticamente una vista previa para revisi√≥n!"""

        elif any(word in query_lower for word in ["buscar", "encontrar", "alumno"]):
            return """Para buscar alumnos puedes usar:

üîç **Por nombre**: "buscar Garc√≠a", "buscar Mar√≠a"
üéì **Por grado**: "alumnos de 3¬∞ A", "estudiantes de 2do grado"
üïê **Por turno**: "alumnos del turno matutino"
üìä **Conteos**: "cu√°ntos hay en 4¬∞ grado"

¬°Prueba con cualquier combinaci√≥n de criterios!"""

        else:
            return """¬°Hola! üëã Soy tu asistente para la escuela "PROF. MAXIMO GAMIZ FERNANDEZ".

Puedo ayudarte con b√∫squedas de alumnos, generar constancias y estad√≠sticas.

**Ejemplos √∫tiles**:
- "buscar L√≥pez" - Busca alumnos
- "constancia de estudios para Juan P√©rez" - Genera documentos
- "cu√°ntos alumnos hay en 3¬∞ grado" - Estad√≠sticas

¬øEn qu√© te puedo ayudar espec√≠ficamente?"""
