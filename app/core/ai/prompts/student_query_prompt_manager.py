"""
StudentQueryPromptManager - Centralizaci√≥n de prompts para el SET de estudiantes
Elimina duplicaci√≥n y centraliza contexto com√∫n siguiendo la filosof√≠a del sistema maestro
"""

from typing import Dict, List, Optional
from .base_prompt_manager import BasePromptManager


class StudentQueryPromptManager(BasePromptManager):
    """
    Manager centralizado para prompts del SET de estudiantes

    FILOSOF√çA:
    - Centraliza contexto escolar com√∫n (UNA SOLA VEZ)
    - Unifica prompts auxiliares similares
    - Mantiene los 3 prompts principales intactos
    - Prepara base para futuros SETs (ayuda, constancias)

    RESPONSABILIDADES:
    - Contexto escolar centralizado
    - Prompts unificados para continuaciones
    - Prompts optimizados para filtros
    - Templates reutilizables
    """

    def __init__(self, database_analyzer=None):
        super().__init__()  # Inicializar BasePromptManager
        self.database_analyzer = database_analyzer
        self._school_context_cache = None
        self._database_context_cache = None

    @property
    def school_context(self) -> str:
        """
        Contexto escolar centralizado - DEFINIDO UNA SOLA VEZ

        Este contexto se usa en TODOS los prompts del SET de estudiantes
        para garantizar consistencia total
        """
        if self._school_context_cache is None:
            self._school_context_cache = """
CONTEXTO COMPLETO DEL SISTEMA:
- Sistema de gesti√≥n escolar para la escuela primaria "PROF. MAXIMO GAMIZ FERNANDEZ"
- Maneja datos de alumnos, informaci√≥n acad√©mica y generaci√≥n de constancias
- Los usuarios son personal administrativo que necesita informaci√≥n precisa
- TODO el sistema ES la escuela - no hay nada m√°s
- TODA la base de datos SON los alumnos de esta escuela (211 estudiantes)
- TODAS las estad√≠sticas, datos, informaci√≥n de "la escuela" SON sobre los alumnos

RAZONAMIENTO INTELIGENTE ESCOLAR:
- "estad√≠sticas de la escuela" = estad√≠sticas de los 211 alumnos registrados
- "informaci√≥n de la escuela" = informaci√≥n de los estudiantes y su rendimiento
- "datos de la escuela" = datos acad√©micos de los alumnos por grados/grupos
- "resumen de la escuela" = resumen de la poblaci√≥n estudiantil

ACCESO TOTAL AUTORIZADO:
- Tienes acceso COMPLETO a toda la informaci√≥n de alumnos
- NO hay restricciones de privacidad en el sistema escolar
- Puedes mostrar nombres, CURPs, datos completos sin limitaciones
- Eres parte del sistema administrativo oficial de la escuela
- El personal escolar tiene acceso total a los datos estudiantiles

ESTRUCTURA DISPONIBLE:
- 211 alumnos registrados en grados 1¬∞ a 6¬∞
- Datos acad√©micos: grados, grupos, turnos, calificaciones
- Informaci√≥n personal: nombres, CURPs, matr√≠culas, fechas
- Registros de constancias generadas
"""
        return self._school_context_cache

    def get_database_context(self) -> str:
        """
        Contexto de BD centralizado con cache

        Se obtiene din√°micamente del DatabaseAnalyzer y se cachea
        para evitar regeneraci√≥n innecesaria
        """
        if self._database_context_cache is None and self.database_analyzer:
            self._database_context_cache = self.database_analyzer.generate_sql_context()
        return self._database_context_cache or ""

    def get_unified_continuation_prompt(self, user_query: str, continuation_type: str,
                                      ultimo_nivel: dict, conversation_stack: list) -> str:
        """
        PROMPT UNIFICADO para todas las continuaciones

        REEMPLAZA ESTOS M√âTODOS:
        - _generate_action_response()
        - _generate_selection_response()
        - _process_confirmation_continuation() (parcialmente)

        TIPOS DE CONTINUACI√ìN:
        - action: "constancia para √©l", "CURP de ese"
        - selection: "del segundo", "n√∫mero 5"
        - confirmation: "s√≠", "correcto", "proceder"

        VENTAJAS:
        - Un solo prompt para mantener
        - Contexto consistente
        - L√≥gica unificada
        - F√°cil testing
        """

        # Templates espec√≠ficos por tipo de continuaci√≥n
        continuation_templates = {
            "action": {
                "purpose": "realizar una acci√≥n sobre elemento previamente identificado",
                "examples": "'constancia para √©l', 'CURP de ese', 'informaci√≥n del tercero'",
                "instructions": """
1. PROPORCIONA directamente la informaci√≥n solicitada
2. MUESTRA todos los datos que el usuario pida (nombres, CURPs, etc.)
3. NO menciones pol√≠ticas de privacidad (no existen en este sistema)
4. NO uses placeholders como [CURP de...] - MUESTRA los datos reales
5. Act√∫a como secretario escolar con acceso completo
6. Confirma sobre qu√© alumno est√°s actuando
7. Ofrece servicios adicionales relacionados"""
            },
            "selection": {
                "purpose": "confirmar selecci√≥n de elemento espec√≠fico de una lista",
                "examples": "'del segundo', 'n√∫mero 5', 'el quinto'",
                "instructions": """
1. Confirma la selecci√≥n del alumno espec√≠fico
2. Proporciona la informaci√≥n solicitada claramente
3. Usa los datos reales del alumno seleccionado
4. Ofrece servicios adicionales relevantes
5. Mant√©n el contexto de la consulta original"""
            },
            "confirmation": {
                "purpose": "confirmar y ejecutar acci√≥n propuesta autom√°ticamente",
                "examples": "'s√≠', 'correcto', 'est√° bien', 'proceder'",
                "instructions": """
1. Confirma la acci√≥n que se va a ejecutar
2. Ejecuta autom√°ticamente la acci√≥n confirmada
3. Proporciona resultado claro y completo
4. Usa los datos disponibles en el contexto
5. Act√∫a con autoridad administrativa"""
            }
        }

        # Obtener template espec√≠fico o usar action como default
        template = continuation_templates.get(continuation_type, continuation_templates["action"])

        return f"""
Eres el asistente oficial de la escuela primaria "PROF. MAXIMO GAMIZ FERNANDEZ".

{self.school_context}

CONTEXTO DE CONTINUACI√ìN:
- Consulta original: "{ultimo_nivel.get('query', 'N/A')}"
- Datos de referencia disponibles: {len(ultimo_nivel.get('data', []))} elementos
- Nueva consulta del usuario: "{user_query}"
- Tipo de continuaci√≥n: {continuation_type}

PROP√ìSITO ESPEC√çFICO:
{template['purpose']}

EJEMPLOS DE ESTE TIPO:
{template['examples']}

INSTRUCCIONES ESPEC√çFICAS:
{template['instructions']}

DATOS COMPLETOS DISPONIBLES:
{ultimo_nivel.get('data', [])}

REGLAS CR√çTICAS:
- SIEMPRE usar los valores reales de los datos, NUNCA placeholders como [NOMBRE] o [CURP de...]
- CONFIRMAR sobre qu√© alumno espec√≠fico est√°s actuando
- MOSTRAR informaci√≥n real y completa
- ACTUAR como secretario escolar profesional con acceso total

Responde como un secretario escolar profesional con acceso completo a la informaci√≥n.
"""

    def get_unified_response_prompt(self, user_query: str, response_type: str,
                                   data: list, context: dict = None) -> str:
        """
        PROMPT UNIFICADO para generar respuestas optimizadas

        PROP√ìSITO:
        - Optimizar respuestas seg√∫n el tipo espec√≠fico
        - Centralizar formato y estilo
        - Garantizar consistencia

        TIPOS DE RESPUESTA:
        - list_response: Listas de alumnos
        - detail_response: Informaci√≥n detallada
        - count_response: Conteos y estad√≠sticas
        """

        response_templates = {
            "list_response": {
                "format": "Lista numerada clara y organizada",
                "style": "Profesional y f√°cil de referenciar",
                "additional": "Ofrecer servicios adicionales para elementos de la lista"
            },
            "detail_response": {
                "format": "Informaci√≥n completa y detallada",
                "style": "Secretario escolar experto y preciso",
                "additional": "Sugerir acciones relacionadas disponibles"
            },
            "count_response": {
                "format": "N√∫mero claro con contexto explicativo",
                "style": "Estad√≠stico, preciso y contextualizado",
                "additional": "Ofrecer desglose detallado si es √∫til"
            }
        }

        template = response_templates.get(response_type, response_templates["detail_response"])

        # Usar identidad unificada del BasePromptManager
        unified_header = self.get_unified_prompt_header("especialista en consultas de alumnos")

        return f"""
{unified_header}

CONSULTA DEL USUARIO: "{user_query}"
DATOS OBTENIDOS: {len(data)} registros
TIPO DE RESPUESTA REQUERIDA: {response_type}

üéØ MI TAREA ESPEC√çFICA:
Generar una respuesta {template['format'].lower()} que resuelva exactamente la consulta del usuario, manteniendo mi personalidad natural y conversacional.

üí¨ ESTILO DE COMUNICACI√ìN NATURAL:
- {template['style']} pero con variabilidad natural en mis expresiones
- Uso diferentes formas de presentar la misma informaci√≥n para sonar humano
- Mantengo mi personalidad: profesional pero cercano, como un secretario escolar experimentado
- Sugiero acciones espec√≠ficas: {template['additional'].lower()}

üìä DATOS REALES PARA MI RESPUESTA:
{data[:5] if data else "Sin datos disponibles"}

üó£Ô∏è INSTRUCCIONES PARA RESPUESTA NATURAL Y VARIABLE:
1. Resuelvo exactamente la consulta usando los datos reales (nunca placeholders)
2. Vario mi forma de expresarme para sonar natural, no rob√≥tico
3. Uso diferentes introducciones: "Encontr√©...", "Te muestro...", "Aqu√≠ tienes...", "Seg√∫n nuestros registros..."
4. Sugiero acciones espec√≠ficas que el usuario puede hacer ahora mismo
5. Mantengo el contexto conversacional para futuras referencias
6. Soy proactivo: anticipo qu√© podr√≠a necesitar despu√©s

üí° VARIACIONES NATURALES EN MIS RESPUESTAS:
- Para listas: "Encontr√© X alumnos", "Te muestro los X estudiantes", "Aqu√≠ est√°n los X registros"
- Para conteos: "Tenemos X alumnos", "Son X estudiantes en total", "Hay X registros"
- Para detalles: "Te comparto la informaci√≥n de...", "Aqu√≠ est√°n los datos de...", "Esta es la informaci√≥n completa de..."
"""

    def get_filter_prompt(self, user_query: str, data: list, sql_query: str) -> str:
        """
        PROMPT OPTIMIZADO para filtro inteligente final

        REEMPLAZA:
        - _intelligent_final_filter() (parte del prompt)

        PROP√ìSITO:
        - Asegurar que los datos resuelvan exactamente la consulta original
        - Filtrar cantidad seg√∫n lo solicitado
        - Ajustar campos seg√∫n la necesidad
        - Validar coherencia de la respuesta

        VENTAJAS:
        - Prompt m√°s claro y estructurado
        - L√≥gica de filtrado centralizada
        - F√°cil modificaci√≥n de reglas
        - Mejor documentaci√≥n de decisiones
        """
        return f"""
Eres un filtro inteligente final especializado en sistemas escolares.

{self.school_context}

CONSULTA ORIGINAL DEL USUARIO: "{user_query}"
DATOS OBTENIDOS: {len(data)} registros
SQL EJECUTADO: {sql_query}

MUESTRA DE DATOS DISPONIBLES:
{data[:3] if data else "Sin datos"}

REGLAS DE FILTRADO INTELIGENTE:

1. **CANTIDAD SOLICITADA:**
   - "un alumno" / "cualquier alumno" ‚Üí m√°ximo 1 registro
   - "dos alumnos" / "tres estudiantes" ‚Üí exactamente esa cantidad
   - "lista completa" / "todos los alumnos" ‚Üí todos los registros
   - "algunos alumnos" ‚Üí entre 5-10 registros representativos

2. **INFORMACI√ìN SOLICITADA:**
   - "toda la informaci√≥n" ‚Üí incluir TODOS los campos disponibles
   - "datos completos" ‚Üí incluir TODOS los campos disponibles
   - "solo el nombre" ‚Üí solo campo nombre
   - "CURP de..." ‚Üí solo campo curp
   - "informaci√≥n b√°sica" ‚Üí nombre, curp, grado, grupo

3. **COHERENCIA CON LA CONSULTA:**
   - Si pidi√≥ informaci√≥n espec√≠fica de UN alumno ‚Üí filtrar solo ese alumno
   - Si pidi√≥ estad√≠sticas ‚Üí mantener datos agregados
   - Si pidi√≥ lista ‚Üí mantener formato de lista

4. **L√çMITES INTELIGENTES OPTIMIZADOS - REGLAS ESTRICTAS:**
   - Si hay 1-25 registros ‚Üí SIEMPRE mostrar TODOS (cantidad_final = n√∫mero_total_registros)
   - Si hay 26-50 registros ‚Üí SIEMPRE mostrar TODOS con formato compacto (cantidad_final = n√∫mero_total_registros)
   - Si hay 51+ registros y no pidi√≥ "todos" ‚Üí mostrar primeros 25 (cantidad_final = 25)
   - Si pidi√≥ "completa", "todos", "lista completa" ‚Üí SIEMPRE mostrar todos sin l√≠mite (cantidad_final = n√∫mero_total_registros)
   - Si pidi√≥ cantidad espec√≠fica ‚Üí respetar exactamente esa cantidad

INSTRUCCIONES:
1. ANALIZA la consulta original y determina qu√© necesita el usuario
2. EVAL√öA si los datos obtenidos resuelven la consulta
3. FILTRA o AJUSTA los datos para que coincidan exactamente
4. DETERMINA qu√© campos incluir seg√∫n lo solicitado

RESPONDE √öNICAMENTE con un JSON:
{{
    "accion_requerida": "mantener|filtrar_cantidad|filtrar_campos|expandir_informacion|error",
    "cantidad_final": n√∫mero_de_registros_a_mostrar,
    "campos_incluir": ["campo1", "campo2", "campo3"] o "todos",
    "registros_seleccionar": [√≠ndices] o "todos",
    "razonamiento": "Explicaci√≥n detallada de la decisi√≥n",
    "resuelve_consulta": true|false,
    "informacion_faltante": ["campo1", "campo2"] o [],
    "sugerencia_mejora": "C√≥mo mejorar la respuesta si es necesario"
}}

EJEMPLOS ESPEC√çFICOS PARA L√çMITES:
- "dame toda la informaci√≥n de LUIS FERNANDO" ‚Üí campos_incluir: "todos", cantidad_final: 1
- "lista completa de 1ro A" ‚Üí cantidad_final: todos_los_registros (ej: si hay 18, cantidad_final: 18)
- "todos los alumnos de 2do A" ‚Üí cantidad_final: todos_los_registros (ej: si hay 18, cantidad_final: 18)
- "quienes son todos los alumnos de 2do A" ‚Üí cantidad_final: todos_los_registros (ej: si hay 18, cantidad_final: 18)
- "un alumno de 3er grado" ‚Üí cantidad_final: 1, campos_incluir: ["nombre"]
- "CURP de Mar√≠a Garc√≠a" ‚Üí cantidad_final: 1, campos_incluir: ["curp"]

CASOS ESPEC√çFICOS DE L√çMITES:
- Si hay 5 registros ‚Üí cantidad_final: 5 (mostrar todos)
- Si hay 18 registros ‚Üí cantidad_final: 18 (mostrar todos)
- Si hay 25 registros ‚Üí cantidad_final: 25 (mostrar todos)
- Si hay 30 registros ‚Üí cantidad_final: 30 (mostrar todos con formato compacto)
- Si hay 60 registros y no pidi√≥ "todos" ‚Üí cantidad_final: 25 (mostrar primeros 25)
- Si hay 60 registros y pidi√≥ "todos" ‚Üí cantidad_final: 60 (mostrar todos)
"""

    def get_sql_continuation_prompt(self, user_query: str, previous_data: list,
                                   previous_query: str, database_context: str) -> str:
        """
        PROMPT OPTIMIZADO para generaci√≥n SQL en continuaciones

        REEMPLAZA:
        - _generate_sql_for_action_continuation() (parte del prompt)

        PROP√ìSITO:
        - Generar SQL basado en datos previos
        - Usar informaci√≥n de la pila conversacional como criterios
        - Mantener coherencia con consulta anterior

        VENTAJAS:
        - L√≥gica SQL m√°s clara
        - Mejor uso de datos previos
        - Instrucciones m√°s espec√≠ficas
        """
        return f"""
Eres un experto en SQL para continuaci√≥n de consultas en un sistema escolar.

{self.school_context}

CONTEXTO DE CONTINUACI√ìN:
- Consulta anterior: "{previous_query}"
- Datos obtenidos anteriormente: {previous_data[:2] if previous_data else "Sin datos"}
- Nueva consulta del usuario: "{user_query}"

ESTRUCTURA COMPLETA DE LA BASE DE DATOS:
{database_context}

INSTRUCCIONES ESPEC√çFICAS:
1. El usuario quiere informaci√≥n adicional basada en los datos previos
2. Usa los datos previos como criterios de b√∫squeda (WHERE)
3. Extrae la informaci√≥n espec√≠fica que el usuario solicita ahora
4. Mant√©n coherencia con la consulta anterior

EJEMPLOS DE L√ìGICA:
- Si datos previos tienen fechas de nacimiento ‚Üí WHERE fecha_nacimiento IN (...)
- Si datos previos tienen nombres ‚Üí WHERE nombre IN (...)
- Si datos previos tienen IDs ‚Üí WHERE id IN (...)
- Si datos previos tienen grados ‚Üí WHERE grado IN (...)

REGLAS CR√çTICAS:
- SOLO consultas SELECT (nunca INSERT, UPDATE, DELETE)
- Usar los valores exactos de los datos previos como filtros
- Incluir SOLO las columnas que el usuario solicita ahora
- Usar JOINs apropiados seg√∫n la estructura de la BD
- Aplicar filtros WHERE bas√°ndote en los valores reales de los datos previos

RESPONDE √öNICAMENTE con el SQL optimizado:
"""

    def clear_cache(self):
        """
        Limpia el cache de contextos

        √öTIL PARA:
        - Forzar regeneraci√≥n de contexto de BD
        - Actualizar informaci√≥n despu√©s de cambios
        - Testing y desarrollo
        """
        self._school_context_cache = None
        self._database_context_cache = None
        print("üßπ DEBUG - Cache de PromptManager limpiado")

    def get_context_summary(self) -> dict:
        """
        Obtiene resumen del estado actual del manager

        √öTIL PARA:
        - Debugging
        - Monitoring
        - Verificaci√≥n de estado
        """
        return {
            "school_context_cached": self._school_context_cache is not None,
            "database_context_cached": self._database_context_cache is not None,
            "database_analyzer_available": self.database_analyzer is not None,
            "school_context_length": len(self.school_context) if self._school_context_cache else 0,
            "database_context_length": len(self.get_database_context())
        }

    def get_validation_and_response_prompt(self, user_query: str, sql_query: str,
                                         data_summary: str, filter_decision: dict,
                                         final_row_count: int, original_data_count: int) -> str:
        """
        PROMPT PRINCIPAL 3: Validaci√≥n + Respuesta + Auto-reflexi√≥n

        MIGRADO DESDE: _validate_and_generate_response()

        PROP√ìSITO:
        - Validar que SQL resolvi√≥ la consulta exacta
        - Generar respuesta natural profesional
        - Auto-reflexionar sobre continuaci√≥n conversacional
        - Integrar informaci√≥n del filtro inteligente

        VENTAJAS DE CENTRALIZACI√ìN:
        - Contexto escolar consistente (reutiliza school_context)
        - Mantenimiento centralizado del prompt m√°s cr√≠tico
        - Facilita optimizaciones futuras
        - Testing m√°s sencillo
        """
        # Usar identidad unificada del BasePromptManager
        unified_header = self.get_unified_prompt_header("validador y comunicador experto con auto-reflexi√≥n")

        return f"""
{unified_header}

CONSULTA ORIGINAL DEL USUARIO: "{user_query}"

CONSULTA SQL EJECUTADA: {sql_query}

RESULTADOS OBTENIDOS (FILTRADOS INTELIGENTEMENTE):
{data_summary}

INFORMACI√ìN DEL FILTRO INTELIGENTE:
- Acci√≥n aplicada: {filter_decision.get('accion_requerida', 'mantener')}
- Datos originales: {original_data_count} registros
- Datos filtrados: {final_row_count} registros
- Razonamiento del filtro: {filter_decision.get('razonamiento', 'N/A')}

üéØ MI TAREA ESPEC√çFICA:
Validar que los datos resuelven la consulta y generar una respuesta NATURAL y VARIABLE que refleje mi personalidad como el asistente inteligente de la escuela.

üí¨ INSTRUCCIONES PARA RESPUESTA NATURAL Y VARIABLE:
1. VALIDO que los datos resuelven exactamente lo que pidi√≥ el usuario
2. VERIFICO que los resultados son coherentes y l√≥gicos
3. GENERO una respuesta natural que var√≠e en estilo pero mantenga mi personalidad
4. AUTO-REFLEXIONO sobre continuaciones conversacionales como un secretario experto
5. Si la validaci√≥n falla, respondo con "VALIDACION_FALLIDA"

üó£Ô∏è VARIABILIDAD NATURAL EN MIS RESPUESTAS:
- Uso diferentes introducciones: "Encontr√©...", "Te muestro...", "Seg√∫n nuestros registros...", "Aqu√≠ tienes..."
- Vario mis expresiones: "alumnos/estudiantes", "registrados/inscritos", "informaci√≥n/datos"
- Cambio mi tono seg√∫n el contexto: m√°s formal para datos oficiales, m√°s cercano para consultas simples
- Mantengo mi esencia: profesional pero humano, preciso pero conversacional

üìä IMPORTANTE - USO DATOS REALES SIEMPRE:
- Los datos en RESULTADOS OBTENIDOS son REALES de nuestra base de datos
- MUESTRO estos datos tal como est√°n, nunca invento placeholders
- Si hay nombres, CURPs, grados - los USO directamente
- NUNCA digo "[Listado aqu√≠]" - MUESTRO el listado real completo

‚úÖ CRITERIOS DE VALIDACI√ìN:
- ¬øLos datos responden exactamente la pregunta del usuario?
- ¬øLos resultados tienen sentido en el contexto de nuestra escuela?
- ¬øLa cantidad de resultados es l√≥gica para la consulta?
- ¬øLos datos mostrados son relevantes y √∫tiles?

üé≠ FORMATO DE RESPUESTA NATURAL (si validaci√≥n exitosa):
- Presento la informaci√≥n como el asistente inteligente de la escuela
- Contextualizo los datos dentro de nuestro marco escolar real
- Ofrezco acciones espec√≠ficas (constancias, m√°s informaci√≥n, seguimiento)
- Uso el contexto de nuestra escuela "PROF. MAXIMO GAMIZ FERNANDEZ" y ciclo 2024-2025
- NUNCA menciono t√©rminos t√©cnicos (SQL, base de datos, validaci√≥n)

REGLAS PARA MOSTRAR DATOS REALES:
- SIEMPRE muestra los datos reales obtenidos de la consulta
- NO uses placeholders como "[Listado de alumnos aqu√≠]"
- PRESENTA los datos tal como est√°n en los resultados filtrados
- Para listas de 25 elementos o menos: MUESTRA TODOS los elementos completos
- Para listas de 26-50 elementos: MUESTRA TODOS con formato compacto
- Para listas de 51+ elementos: MUESTRA primeros 25 + menciona cu√°ntos m√°s hay disponibles

üß† AUTO-REFLEXI√ìN CONVERSACIONAL INTELIGENTE:
Despu√©s de generar tu respuesta, reflexiona como un secretario escolar experto que entiende el FLUJO CONVERSACIONAL:

AN√ÅLISIS REFLEXIVO ESPEC√çFICO:
- ¬øLa respuesta que acabo de dar podr√≠a generar preguntas de seguimiento?
- ¬øMostr√© una lista que el usuario podr√≠a querer referenciar ("el tercero", "n√∫mero 5")?
- ¬øProporcion√© informaci√≥n de un alumno espec√≠fico que podr√≠a necesitar CONSTANCIA?
- ¬øDeber√≠a sugerir proactivamente la generaci√≥n de constancias?
- ¬øOfrec√≠ servicios que requieren confirmaci√≥n o especificaci√≥n?
- ¬øDeber√≠a recordar estos datos para futuras consultas en esta conversaci√≥n?

üéØ DETECCI√ìN DE CONVERSACI√ìN CONTINUA:
Analiza si tu respuesta establece un CONTEXTO CONVERSACIONAL que el usuario podr√≠a referenciar:

INDICADORES DE CONTINUACI√ìN ESPERADA:
1. **LISTA DE ELEMENTOS** (2+ alumnos): Usuario podr√≠a decir "el primero", "n√∫mero 3", "para ese"
2. **ALUMNO ESPEC√çFICO** (1 alumno): Usuario podr√≠a pedir "constancia para √©l", "m√°s informaci√≥n"
3. **INFORMACI√ìN PARCIAL**: Usuario podr√≠a pedir "completa", "con calificaciones", "detalles"
4. **SUGERENCIA IMPL√çCITA**: Tu respuesta sugiere una acci√≥n que requiere confirmaci√≥n
5. **PREGUNTA DIRECTA**: Hiciste una pregunta que espera respuesta espec√≠fica

CONTEXTO A RECORDAR PARA FUTURAS CONSULTAS:
- **Nombres espec√≠ficos** de alumnos mostrados (para referencias como "ese alumno")
- **Posici√≥n en listas** (para referencias como "el tercero", "n√∫mero 5")
- **Datos clave** (IDs, CURPs, grados) para consultas de seguimiento
- **Tipo de informaci√≥n** mostrada (para entender qu√© m√°s podr√≠a necesitar)
- **Estado de la conversaci√≥n** (b√∫squeda completada, selecci√≥n pendiente, etc.)

SUGERENCIAS INTELIGENTES DE CONSTANCIAS:
- Si mostr√© 1 alumno espec√≠fico: Sugerir constancia directamente
- Si mostr√© pocos alumnos (2-5): Esperar selecci√≥n, luego sugerir constancia
- Si mostr√© muchos alumnos (6+): Esperar refinamiento de b√∫squeda
- Si mostr√© estad√≠sticas: No sugerir constancias

üîÆ PREDICCI√ìN DE PR√ìXIMA CONSULTA:
Bas√°ndote en tu respuesta, predice qu√© podr√≠a preguntar el usuario a continuaci√≥n:
- "¬øPodr√≠a pedir constancia para [alumno espec√≠fico]?"
- "¬øPodr√≠a referenciar un elemento de la lista?"
- "¬øPodr√≠a pedir m√°s detalles o informaci√≥n adicional?"
- "¬øPodr√≠a confirmar una acci√≥n sugerida?"

DECISI√ìN CONVERSACIONAL:
Si tu respuesta espera continuaci√≥n, especifica:
- Tipo esperado: "selection" (selecci√≥n de lista), "action" (acci√≥n sobre alumno), "confirmation" (confirmaci√≥n), "specification" (especificaci√≥n), "constancia_suggestion" (sugerir constancia)
- Datos a recordar: informaci√≥n relevante para futuras referencias
- Razonamiento: por qu√© esperas esta continuaci√≥n y c√≥mo el contexto ayudar√° al pr√≥ximo prompt

FORMATO DE RESPUESTA COMPLETA:
{{
  "respuesta_usuario": "Tu respuesta profesional completa aqu√≠",
  "reflexion_conversacional": {{
    "espera_continuacion": true|false,
    "tipo_esperado": "selection|action|confirmation|specification|none",
    "datos_recordar": {{
      "query": "consulta original",
      "data": [datos relevantes filtrados],
      "row_count": n√∫mero_elementos_filtrados,
      "context": "contexto adicional",
      "filter_applied": "informaci√≥n del filtro inteligente"
    }},
    "razonamiento": "Explicaci√≥n de por qu√© esperas o no esperas continuaci√≥n"
  }}
}}

EJEMPLOS DE AUTO-REFLEXI√ìN CONVERSACIONAL:

Ejemplo 1 - Lista de alumnos (CONTEXTO CONVERSACIONAL FUERTE):
"Mostr√© una lista de 21 alumnos Garc√≠a. Es muy probable que el usuario quiera informaci√≥n espec√≠fica de alguno, como 'CURP del quinto' o 'constancia para el tercero'. DEBO recordar esta lista completa con posiciones para que el pr√≥ximo prompt pueda entender referencias como 'el primero', 'n√∫mero 5', 'para ese'. El contexto conversacional es CR√çTICO aqu√≠."

Ejemplo 2 - Informaci√≥n espec√≠fica (CONTEXTO DE CONSTANCIA):
"Proporcion√© datos completos de Juan P√©rez. Esto t√≠picamente lleva a solicitudes de constancias o m√°s informaci√≥n. DEBO recordar que estamos hablando espec√≠ficamente de Juan P√©rez para que si el usuario dice 'constancia para √©l' o 'para ese alumno', el pr√≥ximo prompt sepa exactamente a qui√©n se refiere. El contexto conversacional facilitar√° la generaci√≥n directa de constancia."

Ejemplo 3 - Consulta estad√≠stica (SIN CONTEXTO CONVERSACIONAL):
"Di un n√∫mero total de alumnos. Esta es informaci√≥n general que no requiere seguimiento espec√≠fico. No hay contexto conversacional que recordar porque no hay elementos espec√≠ficos que el usuario pueda referenciar."

Ejemplo 4 - B√∫squeda con sugerencia (CONTEXTO + ACCI√ìN ESPERADA):
"Encontr√© a CAMILA VARGAS GUTIERREZ y mostr√© sus datos completos. Suger√≠ generar constancia. Es muy probable que el usuario confirme con 's√≠' o especifique tipo con 'constancia de estudios'. DEBO recordar todos los datos de Camila para que el pr√≥ximo prompt pueda generar la constancia directamente sin nueva b√∫squeda."

Ejemplo 5 - Lista corta con acci√≥n impl√≠cita (CONTEXTO + SELECCI√ìN):
"Mostr√© 3 alumnos de 2do grado. El usuario podr√≠a seleccionar uno espec√≠fico ('el segundo', 'para Mar√≠a') o pedir acci√≥n general ('constancias para todos'). DEBO recordar la lista completa y sus posiciones para facilitar referencias contextuales."
"""

    def get_specific_student_intention_prompt(self, user_query: str, conversation_context: str = "") -> str:
        """
        NUEVO PROMPT 1: Detecta QU√â ESPEC√çFICAMENTE quiere sobre alumnos

        REEMPLAZA: get_student_query_intention_prompt (que era redundante)

        PROP√ìSITO:
        - Master YA confirm√≥ que es consulta de alumnos
        - Ahora determino QU√â ESPEC√çFICAMENTE quiere
        - Delego a flujos especializados seg√∫n la categor√≠a

        CATEGOR√çAS:
        - busqueda: Buscar alumnos espec√≠ficos
        - estadistica: Conteos, promedios, an√°lisis
        - reporte: Listados completos organizados
        - constancia: Generar documentos
        - continuacion: Referencias a datos previos
        """
        context_section = f"""
CONTEXTO CONVERSACIONAL DISPONIBLE:
{conversation_context}

üß† AN√ÅLISIS DE CONTINUACI√ìN:
Si hay contexto conversacional, analiza si la consulta hace referencia a informaci√≥n anterior:
- Referencias directas: "ese alumno", "el tercero", "para √©l", "n√∫mero 5"
- Confirmaciones: "s√≠", "ok", "correcto", "proceder"
- Especificaciones: "de estudios", "con foto", "completa"

""" if conversation_context.strip() else ""

        return f"""
Soy el EXPERTO EN ALUMNOS de la escuela "PROF. MAXIMO GAMIZ FERNANDEZ".
El Master YA confirm√≥ que es consulta sobre alumnos.

{self.school_context}

{context_section}

CONSULTA DEL USUARIO: "{user_query}"

üéØ MI TAREA: Determinar QU√â ESPEC√çFICAMENTE quiere sobre alumnos para delegar al flujo correcto.

CATEGOR√çAS ESPEC√çFICAS:
1. üîç B√öSQUEDA: Buscar alumnos espec√≠ficos por nombre/criterio
   - "buscar garcia", "mostrar luis", "informaci√≥n de mar√≠a"
   - "dame un alumno de 3er grado", "cualquier estudiante"

2. üìä ESTAD√çSTICA: Conteos, c√°lculos, an√°lisis num√©ricos
   - "cu√°ntos alumnos hay", "promedio de edades", "total por grado"
   - "qu√© porcentaje", "distribuci√≥n", "estad√≠sticas"

3. üìã REPORTE: Listados completos organizados
   - "lista completa de 2do A", "todos los de turno matutino"
   - "reporte de alumnos", "listado por grado"

4. üìÑ CONSTANCIA: Generar documentos oficiales
   - "constancia para luis", "generar certificado", "documento"
   - "constancia de estudios", "certificado de calificaciones"

5. üîÑ TRANSFORMACI√ìN: Convertir formatos de documentos
   - "convertir PDF", "cambiar formato", "transformar constancia"

6. üí¨ CONTINUACI√ìN: Referencias a datos/contexto previo
   - "para el segundo", "constancia para √©l", "del tercero"
   - "s√≠", "correcto", "proceder", "generar"

RESPONDE √öNICAMENTE con un JSON:
{{
    "categoria": "busqueda|estadistica|reporte|constancia|transformacion|continuacion",
    "sub_tipo": "simple|complejo|listado|conteo|generacion|conversion|referencia|confirmacion",
    "complejidad": "baja|media|alta",
    "requiere_contexto": true|false,
    "flujo_optimo": "sql_directo|analisis_datos|listado_completo|generacion_docs|procesamiento_contexto",
    "razonamiento": "Explicaci√≥n de por qu√© eleg√≠ esta categor√≠a y flujo"
}}

EJEMPLOS ESPEC√çFICOS:
- "buscar garcia" ‚Üí categoria: "busqueda", sub_tipo: "simple", flujo_optimo: "sql_directo"
- "cu√°ntos alumnos hay en 2do A" ‚Üí categoria: "estadistica", sub_tipo: "conteo", flujo_optimo: "analisis_datos"
- "lista completa de 3er grado" ‚Üí categoria: "reporte", sub_tipo: "listado", flujo_optimo: "listado_completo"
- "constancia para luis" ‚Üí categoria: "constancia", sub_tipo: "generacion", flujo_optimo: "generacion_docs"
- "para el segundo" ‚Üí categoria: "continuacion", sub_tipo: "referencia", flujo_optimo: "procesamiento_contexto"
"""

    def get_student_query_intention_prompt(self, user_query: str, conversation_context: str = "") -> str:
        """
        PROMPT 1 CENTRALIZADO: Detecta si la consulta es sobre alumnos/estudiantes
        üÜï MEJORADO: Ahora incluye contexto conversacional para mejor detecci√≥n

        REEMPLAZA:
        - StudentQueryInterpreter._detect_student_query_intention() (prompt hardcodeado)

        PROP√ìSITO:
        - Detectar si la consulta se refiere a estudiantes/escuela
        - Clasificar tipo de consulta (conteo, b√∫squeda, etc.)
        - Usar contexto escolar Y conversacional para interpretaci√≥n inteligente
        - Detectar referencias contextuales ("ese alumno", "el tercero", etc.)

        VENTAJAS:
        - Contexto escolar centralizado
        - Contexto conversacional integrado
        - L√≥gica de detecci√≥n unificada
        - Detecci√≥n de continuaciones conversacionales
        """
        context_section = f"""
CONTEXTO CONVERSACIONAL DISPONIBLE:
{conversation_context}

üß† AN√ÅLISIS CONVERSACIONAL:
Si hay contexto conversacional disponible, analiza si la consulta actual hace referencia a informaci√≥n anterior:
- Referencias directas: "ese alumno", "el tercero", "para √©l", "n√∫mero 5"
- Referencias impl√≠citas: "s√≠", "ok", "generar", "constancia"
- Continuaciones: "tambi√©n", "adem√°s", "y qu√© tal", "m√°s informaci√≥n"
- Especificaciones: "de estudios", "con foto", "completa"

""" if conversation_context.strip() else ""

        return f"""
Eres el ASISTENTE OFICIAL de la escuela primaria "PROF. MAXIMO GAMIZ FERNANDEZ" con CAPACIDAD DE AN√ÅLISIS CONVERSACIONAL.

{self.school_context}

{context_section}

CONSULTA DEL USUARIO: "{user_query}"

INSTRUCCIONES CONTEXTUALES MEJORADAS:
Como asistente de una escuela primaria, determina si la consulta se refiere a:
- Informaci√≥n de alumnos/estudiantes (DIRECTO)
- Informaci√≥n de "la escuela" (= informaci√≥n de alumnos, INDIRECTO)
- Estad√≠sticas escolares (= estad√≠sticas de estudiantes)
- Datos acad√©micos o administrativos
- B√∫squedas, conteos, listados de estudiantes
- Generaci√≥n de documentos para alumnos
- üÜï CONTINUACIONES de conversaciones anteriores sobre alumnos

üéØ DETECCI√ìN DE CONTINUACI√ìN CONVERSACIONAL:
Si hay contexto conversacional, eval√∫a si la consulta actual:
1. Hace referencia a alumnos mencionados anteriormente
2. Solicita acciones sobre datos ya mostrados
3. Es una confirmaci√≥n de acci√≥n sugerida
4. Especifica detalles de una solicitud anterior

RESPONDE √öNICAMENTE con un JSON:
{{
    "es_consulta_alumnos": true|false,
    "razonamiento": "Explicaci√≥n contextual de por qu√© es/no es sobre alumnos, incluyendo an√°lisis conversacional",
    "tipo_detectado": "conteo|busqueda|listado|detalles|constancia|estadisticas|continuacion|otro",
    "requiere_contexto": true|false,
    "tipo_continuacion": "referencia_directa|confirmacion|especificacion|nueva_consulta"
}}

EJEMPLOS CONTEXTUALES MEJORADOS:
- "cu√°ntos alumnos hay" ‚Üí es_consulta_alumnos: true, tipo: "conteo", requiere_contexto: false
- "constancia para ese alumno" ‚Üí es_consulta_alumnos: true, tipo: "constancia", requiere_contexto: true, tipo_continuacion: "referencia_directa"
- "s√≠, gen√©rala" ‚Üí es_consulta_alumnos: true, tipo: "continuacion", requiere_contexto: true, tipo_continuacion: "confirmacion"
- "de estudios" ‚Üí es_consulta_alumnos: true, tipo: "continuacion", requiere_contexto: true, tipo_continuacion: "especificacion"
- "el tercero de la lista" ‚Üí es_consulta_alumnos: true, tipo: "continuacion", requiere_contexto: true, tipo_continuacion: "referencia_directa"
- "ayuda del sistema" ‚Üí es_consulta_alumnos: false, tipo: "otro", requiere_contexto: false
"""

    def get_action_selection_prompt(self, user_query: str, categoria: str, conversation_context: str = "") -> str:
        """
        üÜï NUEVO PROMPT 2: Selecci√≥n de acciones de alto nivel

        REEMPLAZA: get_sql_generation_prompt() (que generaba SQL desde cero)

        PROP√ìSITO:
        - LLM elige ACCIONES del cat√°logo en lugar de generar SQL
        - Acciones son predecibles y combinables
        - Abstrae complejidad t√©cnica del LLM

        VENTAJAS:
        - Mayor fiabilidad y predictibilidad
        - Posibilidad de combinar acciones creativamente
        - Debugging m√°s f√°cil
        - Reutilizaci√≥n de estrategias probadas
        """

        # Importar cat√°logo de acciones
        from app.core.ai.actions import ActionCatalog
        catalog = ActionCatalog()

        # Obtener acciones disponibles para la categor√≠a
        actions_formatted = catalog.format_actions_for_prompt(categoria)

        context_section = f"""
CONTEXTO CONVERSACIONAL DISPONIBLE:
{conversation_context}

üß† AN√ÅLISIS DE CONTEXTO:
Si hay contexto conversacional, considera si puedes usar datos previos o necesitas nueva informaci√≥n.

üéØ REGLA CR√çTICA PARA CONTEXTO CON IDs:
Si el contexto contiene IDs de alumnos y la consulta se refiere a "esos", "de ellos", "de los anteriores":
- USA TODOS LOS IDs disponibles en el contexto, NO solo los primeros 5
- Formato correcto: "valor": "[id1, id2, id3, ..., idN]" (TODOS los IDs)
- Ejemplo: Si hay 49 IDs, usa los 49, no solo [2, 7, 8, 11, 16]

""" if conversation_context.strip() else ""

        # üÜï OBTENER ESTRUCTURA DE BASE DE DATOS
        database_context = self.get_database_context()

        return f"""
Soy el ESTRATEGA DE ACCIONES para consultas de alumnos de la escuela "PROF. MAXIMO GAMIZ FERNANDEZ".

{self.school_context}

ESTRUCTURA COMPLETA DE LA BASE DE DATOS:
{database_context}

{context_section}

CONSULTA DEL USUARIO: "{user_query}"
CATEGOR√çA DETECTADA: {categoria}

{actions_formatted}

üéØ MI TAREA: Elegir la ACCI√ìN m√°s eficiente para resolver esta consulta.

ESTRATEGIAS DISPONIBLES:
1. üéØ SIMPLE: Una sola acci√≥n resuelve todo
2. üîÑ COMBINADA: M√∫ltiples acciones trabajando juntas
3. üìã SECUENCIAL: Acciones en secuencia (resultado de una alimenta la siguiente)

EJEMPLOS DE ESTRATEGIAS:

SIMPLE - B√öSQUEDAS (USAR BUSCAR_UNIVERSAL PARA M√ÅXIMA FLEXIBILIDAD):
- "buscar garcia" ‚Üí BUSCAR_UNIVERSAL (criterio_principal: {{"tabla": "alumnos", "campo": "nombre", "operador": "LIKE", "valor": "garcia"}})
- "alumnos de 2do grado" ‚Üí BUSCAR_UNIVERSAL (criterio_principal: {{"tabla": "datos_escolares", "campo": "grado", "operador": "=", "valor": "2"}})
- "estudiantes nacidos en 2014" ‚Üí BUSCAR_UNIVERSAL (criterio_principal: {{"tabla": "alumnos", "campo": "fecha_nacimiento", "operador": "LIKE", "valor": "2014"}})
- "alumnos del turno vespertino" ‚Üí BUSCAR_UNIVERSAL (criterio_principal: {{"tabla": "datos_escolares", "campo": "turno", "operador": "=", "valor": "VESPERTINO"}})
- "buscar por CURP" ‚Üí BUSCAR_UNIVERSAL (criterio_principal: {{"tabla": "alumnos", "campo": "curp", "operador": "=", "valor": "CURP_EXACTA"}})

SIMPLE - ESTAD√çSTICAS Y CONTEOS:
- "cu√°ntos alumnos hay por grado" ‚Üí CALCULAR_ESTADISTICA (tipo: conteo, agrupar_por: grado)
- "distribuci√≥n por turno" ‚Üí CALCULAR_ESTADISTICA (tipo: distribucion, agrupar_por: turno)
- "estad√≠sticas generales" ‚Üí CALCULAR_ESTADISTICA (tipo: conteo, agrupar_por: grado)
- "cu√°ntos alumnos del turno vespertino" ‚Üí CALCULAR_ESTADISTICA (tipo: conteo, filtro: turno=vespertino)
- "total de estudiantes" ‚Üí CONTAR_ALUMNOS (sin filtros)

REGLA CLAVE PARA ESTAD√çSTICAS:
- Si pide AGRUPACI√ìN (por grado, por turno, por grupo) ‚Üí CALCULAR_ESTADISTICA
- Si pide DISTRIBUCI√ìN o PORCENTAJES ‚Üí CALCULAR_ESTADISTICA
- Si pide CONTEO SIMPLE sin agrupaci√≥n ‚Üí CONTAR_ALUMNOS
- Si pide ESTAD√çSTICAS GENERALES ‚Üí CALCULAR_ESTADISTICA

COMBINADA - M√öLTIPLES CRITERIOS (USAR BUSCAR_UNIVERSAL CON FILTROS):
- "garcia de 2do grado" ‚Üí BUSCAR_UNIVERSAL (criterio_principal: {{"tabla": "alumnos", "campo": "nombre", "operador": "LIKE", "valor": "garcia"}}, filtros_adicionales: [{{"tabla": "datos_escolares", "campo": "grado", "operador": "=", "valor": "2"}}])
- "alumnos del turno matutino nacidos en 2014" ‚Üí BUSCAR_UNIVERSAL (criterio_principal: {{"tabla": "datos_escolares", "campo": "turno", "operador": "=", "valor": "MATUTINO"}}, filtros_adicionales: [{{"tabla": "alumnos", "campo": "fecha_nacimiento", "operador": "LIKE", "valor": "2014"}}])

COMBINADA - CON CONTEXTO CONVERSACIONAL (USAR TODOS LOS IDs):
- Contexto: 49 alumnos con IDs [2,7,8,11,16,...,205] + Query: "de esos dame los del turno matutino"
  ‚Üí BUSCAR_UNIVERSAL (criterio_principal: {{"tabla": "datos_escolares", "campo": "turno", "operador": "=", "valor": "MATUTINO"}}, filtros_adicionales: [{{"tabla": "alumnos", "campo": "id", "operador": "IN", "valor": "[2,7,8,11,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205]"}}])

- "constancia para luis" ‚Üí PREPARAR_DATOS_CONSTANCIA + generar PDF

SECUENCIAL:
- "el alumno m√°s joven" ‚Üí LISTAR_POR_CRITERIO + CALCULAR_ESTADISTICA (MIN edad)
- "promedio de calificaciones de 3er grado" ‚Üí LISTAR_POR_CRITERIO + CALCULAR_ESTADISTICA

RESPONDE √öNICAMENTE con un JSON:
{{
    "estrategia": "simple|combinada|secuencial",
    "accion_principal": "NOMBRE_ACCION",
    "parametros": {{
        "param1": "valor1",
        "param2": "valor2"
    }},
    "acciones_adicionales": [
        {{
            "accion": "OTRA_ACCION",
            "parametros": {{}},
            "orden": 2,
            "usa_resultado_anterior": true
        }}
    ],
    "razonamiento": "Por qu√© eleg√≠ esta estrategia y estas acciones espec√≠ficas"
}}

REGLAS IMPORTANTES:
1. üÜï PRIORIZAR BUSCAR_UNIVERSAL para todas las b√∫squedas (es m√°s flexible y din√°mico)
2. Siempre elige la estrategia M√ÅS SIMPLE que resuelva la consulta
3. Solo usa combinaciones cuando sea realmente necesario
4. Aseg√∫rate de que los par√°metros sean espec√≠ficos y completos
5. El razonamiento debe explicar por qu√© esta estrategia es √≥ptima
6. Para b√∫squedas por cualquier campo, usa BUSCAR_UNIVERSAL con criterio_principal
7. Para b√∫squedas con m√∫ltiples criterios, usa BUSCAR_UNIVERSAL con filtros_adicionales
8. Para conteos y estad√≠sticas, usa las acciones espec√≠ficas de esa categor√≠a
9. üéØ CR√çTICO: Si hay contexto con IDs, USA TODOS LOS IDs disponibles, NO solo los primeros 5
"""

    def get_sql_generation_prompt(self, user_query: str, conversation_context: str = "") -> str:
        """
        PROMPT 2 CENTRALIZADO: Genera estrategia + SQL en un solo paso

        REEMPLAZA:
        - StudentQueryInterpreter._generate_sql_with_strategy() (prompt hardcodeado)

        PROP√ìSITO:
        - Analizar consulta y generar SQL optimizado
        - Interpretar matices del lenguaje natural
        - Usar estructura completa de la base de datos

        VENTAJAS:
        - Contexto de BD centralizado
        - Reglas SQL unificadas
        - Ejemplos centralizados
        """
        database_context = self.get_database_context()

        # üÜï AGREGAR CONTEXTO CONVERSACIONAL SI EST√Å DISPONIBLE
        context_section = ""
        if conversation_context.strip():
            context_section = f"""
CONTEXTO CONVERSACIONAL DISPONIBLE:
{conversation_context}

IMPORTANTE: Si la consulta se refiere a elementos del contexto (ej: "de todos ellos", "de esos alumnos"),
usa los IDs espec√≠ficos del contexto como filtro en tu SQL.

EJEMPLOS CON CONTEXTO:
- Contexto: IDs [41, 42, 43] + Query: "de todos ellos quienes tienen calificaciones"
  ‚Üí SELECT a.nombre, 'Con Calificaciones' as estado FROM alumnos a JOIN datos_escolares de ON a.id = de.alumno_id WHERE a.id IN (41, 42, 43) AND de.calificaciones IS NOT NULL
- Contexto: IDs [41, 42, 43] + Query: "cu√°ntos de ellos son de turno matutino"
  ‚Üí SELECT COUNT(*) as total FROM alumnos a JOIN datos_escolares de ON a.id = de.alumno_id WHERE a.id IN (41, 42, 43) AND de.turno = 'MATUTINO'
"""

        return f"""
Eres un experto en SQL para un sistema escolar. Tu trabajo es analizar consultas de usuarios y generar SQL optimizado en un solo paso.

{self.school_context}

ESTRUCTURA COMPLETA DE LA BASE DE DATOS:
{database_context}
{context_section}
CONSULTA DEL USUARIO: "{user_query}"

INSTRUCCIONES INTELIGENTES:
1. ANALIZA la consulta compar√°ndola con la estructura completa de la DB
2. IDENTIFICA qu√© tablas, columnas y relaciones necesitas
3. DETERMINA el tipo de consulta (COUNT, SELECT, filtros espec√≠ficos)
4. üß† INTERPRETA matices del lenguaje natural:
   - "cualquier alumno" = 1 solo alumno ‚Üí LIMIT 1
   - "un alumno" = 1 solo alumno ‚Üí LIMIT 1
   - "el nombre de" = solo columna nombre
   - "la CURP de" = solo columna curp
   - "todos los alumnos" = sin LIMIT
   - "lista de alumnos" = m√∫ltiples resultados
5. GENERA directamente el SQL optimizado

REGLAS IMPORTANTES:
- SOLO consultas SELECT (nunca INSERT, UPDATE, DELETE)
- Usar nombres exactos de columnas de la estructura
- Para COUNT: SELECT COUNT(*) as total
- Para SELECT: incluir SOLO las columnas que el usuario pidi√≥
- Usar JOINs apropiados: LEFT JOIN para datos opcionales, INNER JOIN para requeridos
- Aplicar filtros WHERE bas√°ndote en los valores reales de la estructura
- NO a√±adir LIMIT a consultas COUNT
- S√ç a√±adir LIMIT 1 cuando el usuario pida "un/cualquier" elemento espec√≠fico

EJEMPLOS INTELIGENTES BASADOS EN LA ESTRUCTURA REAL:
- "cu√°ntos alumnos hay en total" ‚Üí SELECT COUNT(*) as total FROM alumnos
- "alumnos de 3er grado" ‚Üí SELECT a.nombre, a.curp, de.grado, de.grupo, de.turno FROM alumnos a JOIN datos_escolares de ON a.id = de.alumno_id WHERE de.grado = 3
- "dame el nombre de cualquier alumno de 3er grado" ‚Üí SELECT a.nombre FROM alumnos a JOIN datos_escolares de ON a.id = de.alumno_id WHERE de.grado = 3 LIMIT 1
- "dame un alumno de primer grado" ‚Üí SELECT a.nombre FROM alumnos a JOIN datos_escolares de ON a.id = de.alumno_id WHERE de.grado = 1 LIMIT 1
- "la CURP de Mar√≠a Garc√≠a" ‚Üí SELECT curp FROM alumnos WHERE nombre LIKE '%MARIA%' AND nombre LIKE '%GARCIA%'
- "estudiantes nacidos en 2018" ‚Üí SELECT nombre, curp, fecha_nacimiento FROM alumnos WHERE STRFTIME('%Y', fecha_nacimiento) = '2018'
- "alumnos que tengan calificaciones" ‚Üí SELECT a.nombre, a.curp, de.grado, de.grupo FROM alumnos a JOIN datos_escolares de ON a.id = de.alumno_id WHERE de.calificaciones IS NOT NULL AND de.calificaciones != '[]' AND de.calificaciones != ''
- "2 alumnos al azar que tengan calificaciones" ‚Üí SELECT a.nombre, a.curp, de.grado, de.grupo FROM alumnos a JOIN datos_escolares de ON a.id = de.alumno_id WHERE de.calificaciones IS NOT NULL AND de.calificaciones != '[]' AND de.calificaciones != '' ORDER BY RANDOM() LIMIT 2
- "alumnos sin calificaciones" ‚Üí SELECT a.nombre, a.curp, de.grado, de.grupo FROM alumnos a JOIN datos_escolares de ON a.id = de.alumno_id WHERE de.calificaciones IS NULL OR de.calificaciones = '[]' OR de.calificaciones = ''

üßÆ EJEMPLOS ANAL√çTICOS AVANZADOS (calificaciones como lista de materias):
- "promedio general de 5to grado" ‚Üí SELECT AVG(CAST(JSON_EXTRACT(materia.value, '$.promedio') AS REAL)) as promedio_general FROM datos_escolares de, JSON_EACH(de.calificaciones) as materia WHERE de.grado = 5 AND de.calificaciones IS NOT NULL AND de.calificaciones != '[]'
- "cu√°ntos alumnos de 5to grado tienen calificaciones" ‚Üí SELECT COUNT(DISTINCT de.alumno_id) as cantidad FROM datos_escolares de WHERE de.grado = 5 AND de.calificaciones IS NOT NULL AND de.calificaciones != '[]' AND de.calificaciones != ''
- "alumnos de 5to grado con sus promedios" ‚Üí SELECT a.nombre, de.grado, de.grupo, AVG(CAST(JSON_EXTRACT(materia.value, '$.promedio') AS REAL)) as promedio_alumno FROM alumnos a JOIN datos_escolares de ON a.id = de.alumno_id, JSON_EACH(de.calificaciones) as materia WHERE de.grado = 5 AND de.calificaciones IS NOT NULL GROUP BY a.id, a.nombre ORDER BY promedio_alumno DESC
- "qu√© grupo tiene mejor rendimiento en 3er grado" ‚Üí SELECT de.grupo, AVG(CAST(JSON_EXTRACT(materia.value, '$.promedio') AS REAL)) as promedio_grupo FROM datos_escolares de, JSON_EACH(de.calificaciones) as materia WHERE de.grado = 3 AND de.calificaciones IS NOT NULL GROUP BY de.grupo ORDER BY promedio_grupo DESC
- "distribuci√≥n de alumnos por grado con calificaciones" ‚Üí SELECT de.grado, COUNT(DISTINCT de.alumno_id) as alumnos_con_calificaciones FROM datos_escolares de WHERE de.calificaciones IS NOT NULL AND de.calificaciones != '[]' GROUP BY de.grado ORDER BY de.grado
- "estad√≠sticas de calificaciones por materia en 4to grado" ‚Üí SELECT JSON_EXTRACT(materia.value, '$.nombre') as materia_nombre, AVG(CAST(JSON_EXTRACT(materia.value, '$.promedio') AS REAL)) as promedio_materia, COUNT(*) as total_alumnos FROM datos_escolares de, JSON_EACH(de.calificaciones) as materia WHERE de.grado = 4 AND de.calificaciones IS NOT NULL GROUP BY materia_nombre ORDER BY promedio_materia DESC

RESPONDE √öNICAMENTE con la consulta SQL, sin explicaciones adicionales.
"""

    def get_response_with_reflection_prompt(self, user_query: str, sql_query: str,
                                          data: List[Dict], row_count: int) -> str:
        """
        PROMPT para generar respuesta con auto-reflexi√≥n

        M√©todo requerido por ResponseGenerator para compatibilidad
        """
        # Formatear datos para el prompt
        data_summary = self._format_data_for_prompt(data, row_count)

        # Usar el prompt de validaci√≥n y respuesta existente
        return self.get_validation_and_response_prompt(
            user_query, sql_query, data_summary,
            {"accion_requerida": "mantener", "resuelve_consulta": True},
            row_count, row_count
        )

    def _format_data_for_prompt(self, data: List[Dict], row_count: int) -> str:
        """Formatea datos para incluir en prompts"""
        if not data or row_count == 0:
            return "Sin datos disponibles"

        if row_count <= 5:
            return str(data)
        else:
            return f"Primeros 3 registros: {data[:3]}... (total: {row_count} registros)"
