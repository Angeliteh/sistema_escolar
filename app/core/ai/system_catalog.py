"""
üéØ CAT√ÅLOGO CENTRALIZADO DEL SISTEMA

Todas las intenciones, sub-intenciones, acciones y capacidades
en un solo lugar para f√°cil modificaci√≥n y mantenimiento.

Este archivo reemplaza la informaci√≥n dispersa en m√∫ltiples archivos
y permite inyecci√≥n din√°mica en prompts.
"""

from typing import Dict, List
from app.core.config.school_config_manager import get_school_config_manager


class SystemCatalog:
    """
    üéØ CAT√ÅLOGO CENTRALIZADO DEL SISTEMA ESCOLAR
    
    Contiene todas las intenciones, sub-intenciones, especialistas y acciones
    disponibles en el sistema. Se usa para generar prompts din√°micamente.
    """
    
    @staticmethod
    def get_available_intentions() -> Dict:
        """
        üìã INTENCIONES COMPLETAS DEL SISTEMA

        Basado en la informaci√≥n actual funcionando extra√≠da de:
        - master_interpreter.py (system_map)
        - master_knowledge.py (interpreters_map)
        - Prompts actuales del Master

        Returns:
            Dict con todas las intenciones, sub-intenciones y ejemplos
        """
        # üéØ OBTENER CONFIGURACI√ìN DIN√ÅMICA
        school_config = get_school_config_manager()
        school_name = school_config.get_school_name()
        data_scope = school_config.get_data_scope_text()

        return {
            "consulta_alumnos": {
                "description": f"TODO sobre alumnos de la escuela {school_name} ({data_scope})",
                "specialist": "StudentQueryInterpreter",
                "database_access": True,
                "priority": 1,  # M√°xima prioridad para consultas escolares
                "sub_intentions": {
                    "busqueda_simple": {
                        "description": "Buscar alumno espec√≠fico por nombre, matr√≠cula, CURP, grado, grupo, turno (1-2 criterios b√°sicos)",
                        "examples": [
                            "buscar Garc√≠a",
                            "informaci√≥n de Juan P√©rez",
                            "datos de matr√≠cula 123",
                            "alumno con CURP RARR150330...",
                            "alumnos de 3er grado",
                            "estudiantes del turno vespertino"
                        ],
                        "capabilities": ["nombre", "matr√≠cula", "CURP", "grado", "grupo", "turno"]
                        # ‚ùå ELIMINADO: "actions" - Master NO debe conocer acciones espec√≠ficas
                    },
                    "busqueda_compleja": {
                        "description": "B√∫squedas con m√∫ltiples criterios combinados (3+ criterios o campos especiales)",
                        "examples": [
                            "Garc√≠a de 3er grado turno matutino",
                            "alumnos con promedio mayor a 8",
                            "estudiantes de grupo A con calificaciones altas"
                        ],
                        "capabilities": ["criterios combinados", "filtros m√∫ltiples", "promedios"]
                        # ‚ùå ELIMINADO: "actions" - Master NO debe conocer acciones espec√≠ficas
                    },


                    "estadisticas": {
                        "description": "Conteos, distribuciones, an√°lisis num√©ricos y estad√≠sticas",
                        "examples": [
                            "cu√°ntos alumnos hay",
                            "distribuci√≥n por grados",
                            "estad√≠sticas del turno vespertino",
                            "total de estudiantes por grupo",
                            "an√°lisis de calificaciones"
                        ],
                        "capabilities": ["conteos", "distribuciones", "promedios", "an√°lisis num√©rico"]
                        # ‚ùå ELIMINADO: "actions" - Master NO debe conocer acciones espec√≠ficas
                    },
                    "generar_constancia": {
                        "description": "Generar constancias oficiales para alumnos espec√≠ficos",
                        "examples": [
                            "constancia para Franco Alexander",
                            "certificado de estudios de Mar√≠a",
                            "generar constancia de Juan P√©rez",
                            "generale una constancia de calificaciones",
                            "genera constancia para ese alumno",
                            "crea una constancia de estudios",
                            "documento oficial para el alumno",
                            "constancia de calificaciones a ese alumno"
                        ],
                        "capabilities": ["constancias de estudio", "certificados", "documentos oficiales"]
                        # ‚ùå ELIMINADO: "actions" - Master NO debe conocer acciones espec√≠ficas
                    },
                    "transformacion_pdf": {
                        "description": "Transformaci√≥n de constancias entre formatos",
                        "examples": [
                            "convertir constancia a formato de estudios",
                            "cambiar formato PDF",
                            "transformar a constancia de calificaciones"
                        ],
                        "capabilities": ["conversi√≥n de formatos", "transformaci√≥n de documentos"]
                        # ‚ùå ELIMINADO: "actions" - Master NO debe conocer acciones espec√≠ficas
                    }
                }
            },
            
            "ayuda_sistema": {
                "description": "Ayuda sobre el sistema, capacidades, creador, funcionamiento y soporte t√©cnico",
                "specialist": "HelpInterpreter",
                "database_access": False,
                "priority": 2,
                "sub_intentions": {
                    "explicacion_general": {
                        "description": "Capacidades generales del sistema y qu√© puede hacer",
                        "examples": [
                            "qu√© puedes hacer",
                            "ayuda",
                            "capacidades del sistema",
                            "qu√© tipos de consultas manejas"
                        ],
                        "capabilities": ["explicaci√≥n de capacidades", "gu√≠a general"]
                        # ‚ùå ELIMINADO: "actions" - Master NO debe conocer acciones espec√≠ficas
                    },
                    "tutorial_funciones": {
                        "description": "C√≥mo usar funciones espec√≠ficas del sistema",
                        "examples": [
                            "c√≥mo buscar alumnos",
                            "c√≥mo generar constancias",
                            "tutorial de uso",
                            "gu√≠a paso a paso"
                        ],
                        "capabilities": ["tutoriales", "gu√≠as de uso", "instrucciones"]
                        # ‚ùå ELIMINADO: "actions" - Master NO debe conocer acciones espec√≠ficas
                    },
                    "sobre_creador": {
                        "description": "Informaci√≥n sobre Angel, el creador del sistema",
                        "examples": [
                            "qui√©n te cre√≥",
                            "qui√©n es Angel",
                            "tu creador",
                            "informaci√≥n del desarrollador"
                        ],
                        "capabilities": ["informaci√≥n del creador", "historia del desarrollo"]
                        # ‚ùå ELIMINADO: "actions" - Master NO debe conocer acciones espec√≠ficas
                    },
                    "auto_consciencia": {
                        "description": "Identidad y naturaleza del asistente de IA",
                        "examples": [
                            "qu√© eres",
                            "qui√©n eres",
                            "c√≥mo te defines",
                            "tu identidad"
                        ],
                        "capabilities": ["auto-explicaci√≥n", "identidad del asistente"]
                        # ‚ùå ELIMINADO: "actions" - Master NO debe conocer acciones espec√≠ficas
                    },
                    "ventajas_sistema": {
                        "description": "Beneficios y ventajas de usar IA vs m√©todos tradicionales",
                        "examples": [
                            "por qu√© usar IA",
                            "ventajas del sistema",
                            "beneficios vs Excel",
                            "qu√© mejoras ofreces"
                        ],
                        "capabilities": ["comparaciones", "beneficios", "ventajas competitivas"]
                        # ‚ùå ELIMINADO: "actions" - Master NO debe conocer acciones espec√≠ficas
                    },
                    "casos_uso_avanzados": {
                        "description": "Funciones impresionantes y casos de uso avanzados",
                        "examples": [
                            "sorpr√©ndeme",
                            "qu√© m√°s puedes hacer",
                            "funciones avanzadas",
                            "casos impresionantes"
                        ],
                        "capabilities": ["casos avanzados", "funciones impresionantes"]
                        # ‚ùå ELIMINADO: "actions" - Master NO debe conocer acciones espec√≠ficas
                    },
                    "limitaciones_honestas": {
                        "description": "Limitaciones y restricciones del sistema",
                        "examples": [
                            "cu√°les son tus limitaciones",
                            "qu√© no puedes hacer",
                            "restricciones del sistema",
                            "limitaciones t√©cnicas"
                        ],
                        "capabilities": ["transparencia", "limitaciones", "honestidad"]
                        # ‚ùå ELIMINADO: "actions" - Master NO debe conocer acciones espec√≠ficas
                    }
                }
            },
            


            "conversacion_general": {
                "description": "Conversaci√≥n casual y temas no relacionados al sistema escolar",
                "specialist": "GeneralInterpreter",
                "database_access": False,
                "priority": 4,
                "sub_intentions": {
                    "saludo": {
                        "description": "Saludos y presentaciones",
                        "examples": [
                            "hola",
                            "buenos d√≠as",
                            "¬øc√≥mo est√°s?",
                            "buenas tardes"
                        ],
                        "capabilities": ["saludos amigables", "presentaci√≥n del sistema"]
                    },
                    "chat_casual": {
                        "description": "Conversaci√≥n no relacionada al sistema",
                        "examples": [
                            "¬øqu√© tal el clima?",
                            "cu√©ntame un chiste",
                            "h√°blame de ti",
                            "conversaci√≥n general"
                        ],
                        "capabilities": ["conversaci√≥n natural", "redirecci√≥n educada al sistema"]
                    }
                }
            }
        }
    
    @staticmethod
    def get_specialist_capabilities() -> Dict:
        """
        üéØ CAPACIDADES ESPEC√çFICAS DE CADA ESPECIALISTA
        
        Informaci√≥n detallada sobre qu√© puede hacer cada int√©rprete,
        sus acciones disponibles y limitaciones.
        """
        # üéØ OBTENER CONFIGURACI√ìN DIN√ÅMICA
        school_config = get_school_config_manager()
        school_name = school_config.get_school_name()
        data_scope = school_config.get_data_scope_text()
        total_students = school_config.get_total_students()

        return {
            "StudentQueryInterpreter": {
                "description": f"Especialista en consultas escolares de {total_students} alumnos activos",
                "database_access": True,
                "data_scope": data_scope,
                "school_name": school_name,
                "available_actions": [
                    "BUSCAR_UNIVERSAL",
                    "CALCULAR_ESTADISTICA", 
                    "CONTAR_UNIVERSAL",
                    "PREPARAR_DATOS_CONSTANCIA",
                    "GENERAR_CONSTANCIA_COMPLETA",
                    "GENERAR_LISTADO_COMPLETO",
                    "FILTRAR_POR_CALIFICACIONES",
                    "TRANSFORMAR_PDF"
                ],
                "capabilities": [
                    "B√∫squedas por cualquier campo",
                    "Estad√≠sticas y conteos",
                    "Generaci√≥n de constancias oficiales",
                    "An√°lisis de calificaciones",
                    "Filtrado de resultados",
                    "Transformaci√≥n de PDFs"
                ],
                "limitations": [
                    "Solo datos de alumnos activos (no hist√≥ricos)",
                    "Constancias limitadas a formatos predefinidos",
                    "No puede modificar datos, solo consultar"
                ]
            },
            
            "HelpInterpreter": {
                "description": "Especialista en ayuda del sistema y auto-explicaci√≥n con personalidad",
                "database_access": False,
                "data_scope": "Conocimiento del sistema, capacidades, limitaciones, informaci√≥n sobre Angel",
                "available_actions": [
                    "EXPLICACION_GENERAL",
                    "TUTORIAL_FUNCIONES",
                    "SOBRE_CREADOR",
                    "AUTO_CONSCIENCIA",
                    "VENTAJAS_SISTEMA",
                    "CASOS_USO_AVANZADOS",
                    "LIMITACIONES_HONESTAS"
                ],
                "capabilities": [
                    "Explicaci√≥n de capacidades del sistema",
                    "Tutoriales y gu√≠as de uso",
                    "Informaci√≥n sobre el creador (Angel)",
                    "Auto-consciencia y personalidad",
                    "Comparaciones con m√©todos tradicionales",
                    "Transparencia sobre limitaciones"
                ],
                "personality": [
                    "Conversacional y amigable",
                    "Persuasivo sobre ventajas de IA",
                    "Conoce a Angel como experto en IA",
                    "Honesto sobre limitaciones",
                    "Entusiasta del sistema"
                ]
            },

            "GeneralInterpreter": {
                "description": "Especialista en conversaci√≥n general y temas no escolares",
                "database_access": False,
                "data_scope": "Conversaci√≥n natural manteniendo identidad escolar sutil",
                "available_actions": [
                    "RESPUESTA_CASUAL",
                    "SALUDO_AMIGABLE",
                    "REDIRECCION_EDUCADA"
                ],
                "capabilities": [
                    "Conversaci√≥n natural sobre cualquier tema",
                    "Saludos y despedidas amigables",
                    "Redirecci√≥n educada hacia funciones del sistema",
                    "Mantiene identidad escolar sutilmente"
                ],
                "personality": [
                    "LLM vers√°til con identidad escolar sutil",
                    "Conversacional y naturalmente humano",
                    "Redirige educadamente a funciones escolares",
                    "Mantiene tono profesional pero casual"
                ]
            }
        }

    @staticmethod
    def generate_intentions_section() -> str:
        """
        üìã GENERAR SECCI√ìN DE INTENCIONES PARA PROMPTS

        Genera din√°micamente la secci√≥n de intenciones que se inyecta
        en los prompts del Master para mantener consistencia.

        Returns:
            String formateado con todas las intenciones disponibles
        """
        intentions_catalog = SystemCatalog.get_available_intentions()
        sections = []

        for intention_key, intention_data in intentions_catalog.items():
            specialist = intention_data["specialist"]
            description = intention_data["description"]
            priority = intention_data.get("priority", 99)

            section = f"""
üéØ **{intention_key.upper()}** ‚Üí {specialist} (Prioridad: {priority})
   ‚îú‚îÄ‚îÄ DESCRIPCI√ìN: {description}
   ‚îú‚îÄ‚îÄ SUB-INTENCIONES DISPONIBLES:"""

            for sub_key, sub_data in intention_data["sub_intentions"].items():
                sub_desc = sub_data["description"]
                examples = ", ".join(sub_data["examples"][:3])  # Primeros 3 ejemplos
                capabilities = ", ".join(sub_data.get("capabilities", []))

                section += f"""
   ‚îÇ   ‚îú‚îÄ‚îÄ {sub_key}: {sub_desc}
   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Ejemplos: {examples}
   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ Capacidades: {capabilities}"""

            sections.append(section)

        return "\n".join(sections)

    @staticmethod
    def generate_mapping_examples() -> str:
        """
        üéØ GENERAR EJEMPLOS DE MAPEO PARA PROMPTS

        Genera din√°micamente los ejemplos de mapeo que ayudan al LLM
        a entender c√≥mo mapear consultas a intenciones espec√≠ficas.

        Returns:
            String con ejemplos de mapeo formateados
        """
        intentions_catalog = SystemCatalog.get_available_intentions()
        mappings = []

        for intention_key, intention_data in intentions_catalog.items():
            for sub_key, sub_data in intention_data["sub_intentions"].items():
                for example in sub_data["examples"][:2]:  # 2 ejemplos por sub-intenci√≥n
                    mapping = f'- "{example}" ‚Üí {intention_key}/{sub_key}'
                    mappings.append(mapping)

        return "\n".join(mappings)

    @staticmethod
    def get_intention_by_specialist(specialist_name: str) -> Dict:
        """
        üîç OBTENER INTENCIONES POR ESPECIALISTA

        Filtra las intenciones que puede manejar un especialista espec√≠fico.
        √ötil para validaci√≥n y delegaci√≥n.

        Args:
            specialist_name: Nombre del especialista

        Returns:
            Dict con las intenciones que puede manejar el especialista
        """
        intentions_catalog = SystemCatalog.get_available_intentions()
        specialist_intentions = {}

        for intention_key, intention_data in intentions_catalog.items():
            if intention_data["specialist"] == specialist_name:
                specialist_intentions[intention_key] = intention_data

        return specialist_intentions

    @staticmethod
    def validate_intention_mapping(intention: str, sub_intention: str, specialist: str) -> bool:
        """
        ‚úÖ VALIDAR MAPEO DE INTENCI√ìN

        Verifica que una combinaci√≥n de intenci√≥n/sub-intenci√≥n/especialista
        sea v√°lida seg√∫n el cat√°logo.

        Args:
            intention: Intenci√≥n principal
            sub_intention: Sub-intenci√≥n espec√≠fica
            specialist: Especialista asignado

        Returns:
            True si el mapeo es v√°lido, False en caso contrario
        """
        try:
            intentions_catalog = SystemCatalog.get_available_intentions()

            # Verificar que la intenci√≥n existe
            if intention not in intentions_catalog:
                return False

            intention_data = intentions_catalog[intention]

            # Verificar que el especialista es correcto
            if intention_data["specialist"] != specialist:
                return False

            # Verificar que la sub-intenci√≥n existe
            if sub_intention not in intention_data["sub_intentions"]:
                return False

            return True

        except Exception:
            return False

    @staticmethod
    def generate_examples_section() -> str:
        """
        üéØ GENERAR EJEMPLOS ESPEC√çFICOS PARA DETECCI√ìN PRECISA

        Genera ejemplos detallados que ayudan al LLM a detectar correctamente
        l√≠mites, filtros y entidades espec√≠ficas.
        """
        return """
üéØ **EJEMPLOS ESPEC√çFICOS PARA DETECCI√ìN PRECISA:**

**L√çMITES NUM√âRICOS (CR√çTICO PARA FUNCIONALIDAD):**
- "Dame 3 alumnos de 3er grado" ‚Üí limite_resultados: 3, filtros: ["grado: 3"]
- "Muestra 5 estudiantes" ‚Üí limite_resultados: 5
- "Los primeros 2" ‚Üí limite_resultados: 2
- "Solo 1 alumno" ‚Üí limite_resultados: 1
- "M√°ximo 10" ‚Üí limite_resultados: 10
- "El segundo de la lista" ‚Üí limite_resultados: 1 (posici√≥n espec√≠fica)

**FILTROS ESPEC√çFICOS:**
- "alumnos de 2do A" ‚Üí filtros: ["grado: 2", "grupo: A"]
- "estudiantes turno matutino" ‚Üí filtros: ["turno: MATUTINO"]
- "ni√±os de primer grado grupo B" ‚Üí filtros: ["grado: 1", "grupo: B"]
- "3er grado vespertino" ‚Üí filtros: ["grado: 3", "turno: VESPERTINO"]

**CONSTANCIAS (CR√çTICO - DETECCI√ìN OBLIGATORIA):**
- "constancia para Juan P√©rez" ‚Üí generar_constancia, nombres: ["Juan P√©rez"]
- "certificado de estudios" ‚Üí generar_constancia, tipo_constancia: "estudios"
- "constancia con foto" ‚Üí generar_constancia, incluir_foto: true
- "generale una constancia de calificaciones" ‚Üí generar_constancia, tipo_constancia: "calificaciones"
- "genera constancia para ese alumno" ‚Üí generar_constancia (con contexto)
- "crea una constancia de estudios" ‚Üí generar_constancia, tipo_constancia: "estudios"
- "constancia de calificaciones a ese alumno" ‚Üí generar_constancia, tipo_constancia: "calificaciones"
- "si porfavior generale a ese alumno una constancia de traslado" ‚Üí generar_constancia, tipo_constancia: "traslado"
- "generale una constancia" ‚Üí generar_constancia
- "genera una constancia" ‚Üí generar_constancia
- "crea constancia" ‚Üí generar_constancia
- "documento oficial" ‚Üí generar_constancia
- "certificado" ‚Üí generar_constancia

**RESOLUCI√ìN DE CONTEXTO (CR√çTICO):**
- "a ese alumno" + contexto con 1 alumno ‚Üí alumno_resuelto: {datos del contexto}
- "para √©l" + contexto con 1 alumno ‚Üí alumno_resuelto: {datos del contexto}
- "para Franco" + contexto con Franco Alexander ‚Üí alumno_resuelto: Franco Alexander
- "al estudiante" + contexto con 1 alumno ‚Üí alumno_resuelto: {datos del contexto}

**ESTAD√çSTICAS:**
- "cu√°ntos alumnos hay" ‚Üí estadisticas, sub_tipo: "conteo"
- "distribuci√≥n por grados" ‚Üí estadisticas, sub_tipo: "distribucion"
- "total de estudiantes" ‚Üí estadisticas, sub_tipo: "conteo"

**PATRONES DE L√çMITES CR√çTICOS:**
- N√∫meros expl√≠citos: 1, 2, 3, 4, 5, etc. ‚Üí limite_resultados: [n√∫mero]
- Ordinales: "primero" ‚Üí limite_resultados: 1, "segundo" ‚Üí limite_resultados: 1 (posici√≥n 2)
- Limitadores: "solo", "m√°ximo", "hasta", "no m√°s de" ‚Üí limite_resultados: [n√∫mero]

**MAPEO DE T√âRMINOS:**
- "primer grado", "1er grado", "primero" ‚Üí grado: 1
- "segundo grado", "2do grado" ‚Üí grado: 2
- "tercer grado", "3er grado" ‚Üí grado: 3
- "matutino", "ma√±ana" ‚Üí turno: MATUTINO
- "vespertino", "tarde" ‚Üí turno: VESPERTINO
"""

    @staticmethod
    def generate_context_rules() -> str:
        """
        üß† GENERAR REGLAS PARA MANEJO INTELIGENTE DE CONTEXTO

        Reglas espec√≠ficas para resolver referencias contextuales
        y manejar continuaciones de conversaci√≥n.
        """
        return """
üß† **REGLAS DE CONTEXTO CONVERSACIONAL:**

**RESOLUCI√ìN DE REFERENCIAS:**
- "de esos" ‚Üí filtrar lista del NIVEL 1 (m√°s reciente)
- "el segundo" ‚Üí elemento en posici√≥n 2 de lista anterior
- "para Juan" ‚Üí buscar Juan en contexto o base de datos
- "tambi√©n dame" ‚Üí operaci√≥n adicional sobre contexto

**PRIORIZACI√ìN DE NIVELES:**
- NIVEL 1 = M√ÅS RECIENTE = M√ÅXIMA PRIORIDAD
- Usar niveles anteriores como contexto adicional
- Resolver referencias con informaci√≥n m√°s reciente primero

**CASOS DE RESOLUCI√ìN:**
- 1 elemento en contexto + referencia clara ‚Üí RESOLVER directamente
- M√∫ltiples elementos + referencia ambigua ‚Üí PEDIR aclaraci√≥n
- Sin contexto + referencia ‚Üí BUSCAR en base de datos completa
"""

    @staticmethod
    def get_json_structure() -> dict:
        """
        üìã ESTRUCTURA JSON DIN√ÅMICA COMPLETA

        Estructura completa para respuestas del Master con todos
        los campos necesarios para detecci√≥n precisa.
        """
        return {
            "intention_type": "consulta_alumnos|ayuda_sistema|conversacion_general",
            "sub_intention": "busqueda_simple|estadisticas|generar_constancia|explicacion_general|tutorial_funciones|saludo|chat_casual",
            "confidence": 0.95,
            "reasoning": "Explicaci√≥n detallada del proceso mental seguido paso a paso",
            "detected_entities": {
                # üéØ ENTIDADES ESPEC√çFICAS POR SUB-INTENCI√ìN:

                # Para busqueda_simple:
                "nombres": ["Juan P√©rez", "Mar√≠a Garc√≠a"],  # Solo si busca alumnos espec√≠ficos
                "filtros": ["grado: 2", "grupo: A"],       # Solo si busca por criterios
                "limite_resultados": 3,                    # Solo si especifica l√≠mite

                # Para generar_constancia:
                "alumno_resuelto": None,                   # Solo para constancias con contexto
                "tipo_constancia": "estudios",             # Solo para constancias
                "incluir_foto": False,                     # Solo para constancias

                # Para estadisticas:
                "accion_principal": "contar",              # Solo para estad√≠sticas

                # üö´ ELIMINADOS (Student los deduce por sub-intenci√≥n):
                # "campo_solicitado": None,               # ‚ùå Student lo deduce
                # "fuente_datos": "base_datos",           # ‚ùå Siempre es BD
                # "contexto_especifico": None             # ‚ùå Redundante
            },
            "student_categorization": {
                "categoria": "busqueda",
                "sub_tipo": "simple",
                "requiere_contexto": False,
                "flujo_optimo": "sql_directo"
            }
        }

    @staticmethod
    def get_json_instructions_with_examples() -> str:
        """
        üìã INSTRUCCIONES JSON CON EJEMPLOS ESPEC√çFICOS

        Genera instrucciones JSON con ejemplos concretos para
        guiar al LLM en la detecci√≥n correcta de entidades.
        """
        return """
üìã **FORMATO DE RESPUESTA OBLIGATORIO:**

Responde √öNICAMENTE con un JSON v√°lido siguiendo estos EJEMPLOS ESPEC√çFICOS:

**EJEMPLO 1: "Dame 3 alumnos de segundo grado"**
```json
{{
  "intention_type": "consulta_alumnos",
  "sub_intention": "busqueda_simple",
  "confidence": 0.95,
  "reasoning": "Usuario solicita b√∫squeda por criterios: 3 alumnos de grado 2",
  "detected_entities": {{
    "filtros": ["grado: 2"],
    "limite_resultados": 3
  }},
  "student_categorization": {{
    "categoria": "busqueda",
    "sub_tipo": "simple",
    "requiere_contexto": false,
    "flujo_optimo": "sql_directo"
  }}
}}
```

**EJEMPLO 2: "Cu√°ntos alumnos hay en total"**
```json
{{
  "intention_type": "consulta_alumnos",
  "sub_intention": "estadisticas",
  "confidence": 0.95,
  "reasoning": "Usuario solicita conteo total de alumnos",
  "detected_entities": {{
    "accion_principal": "contar"
  }},
  "student_categorization": {{
    "categoria": "estadistica",
    "sub_tipo": "conteo",
    "requiere_contexto": false,
    "flujo_optimo": "sql_directo"
  }}
}}
```

**EJEMPLO 3: "Informaci√≥n completa de Juan P√©rez"**
```json
{{
  "intention_type": "consulta_alumnos",
  "sub_intention": "busqueda_simple",
  "confidence": 0.95,
  "reasoning": "Usuario solicita informaci√≥n de alumno espec√≠fico",
  "detected_entities": {{
    "nombres": ["Juan P√©rez"]
  }},
  "student_categorization": {{
    "categoria": "busqueda",
    "sub_tipo": "simple",
    "requiere_contexto": false,
    "flujo_optimo": "sql_directo"
  }}
}}
```

**EJEMPLO 4: "Genera constancia para ese alumno"**
```json
{{
  "intention_type": "consulta_alumnos",
  "sub_intention": "generar_constancia",
  "confidence": 0.95,
  "reasoning": "Usuario solicita constancia para alumno del contexto",
  "detected_entities": {{
    "alumno_resuelto": {{"id": 1, "nombre": "Franco Alexander"}},
    "tipo_constancia": "estudios"
  }},
  "student_categorization": {{
    "categoria": "constancia",
    "sub_tipo": "individual",
    "requiere_contexto": true,
    "flujo_optimo": "alumno_resuelto"
  }}
}}
```

‚ö†Ô∏è **REGLAS CR√çTICAS:**
- DETECTAR L√çMITES: "dame 3" ‚Üí limite_resultados: 3
- DETECTAR FILTROS: "segundo grado" ‚Üí filtros: ["grado: 2"]
- USAR COMILLAS DOBLES (") para strings
- NO agregar explicaciones fuera del JSON
"""

    @staticmethod
    def get_available_actions_for_intention(intention: str, sub_intention: str) -> List[str]:
        """
        üö® M√âTODO OBSOLETO - MASTER NO DEBE CONOCER ACCIONES

        Este m√©todo ya no se usa porque Master no debe conocer acciones espec√≠ficas.
        Las acciones son responsabilidad de cada especialista (Student/Help).

        Returns:
            Lista vac√≠a - Master solo maneja intenciones y delegaci√≥n
        """
        # ‚ùå ELIMINADO: Master no debe conocer acciones espec√≠ficas
        # Cada especialista maneja sus propias acciones independientemente
        return []
